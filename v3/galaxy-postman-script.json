{
    "info": {
        "_postman_id": "5a74d233-c2b0-4110-a280-83524d540463",
        "name": "Galaxy-web-api",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Activity/GetList",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"ServerID\": \"TestServerID\",\r\n    \"CharacterID\": \"TestCharacterID\",\r\n    \"ActivityType\": \"SignIn\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Activity/GetList",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Activity", "GetList"]
                }
            },
            "response": []
        },
        {
            "name": "Activity/GetUserAccumulativeRecharge",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"IsGroupBy\": 0\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Activity/GetUserAccumulativeRecharge",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Activity", "GetUserAccumulativeRecharge"]
                }
            },
            "response": []
        },
        {
            "name": "Activity/Task/SignIn",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"ServerID\": \"TestServerID\",\r\n    \"CharacterID\": \"TestCharacterID\",\r\n    \"ActivityID\": 4,\r\n    \"TaskID\": 41\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Activity/Task/SignIn",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Activity", "Task", "SignIn"]
                }
            },
            "response": []
        },
        {
            "name": "Bot/Telegram/SendMessage",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}",
                        "disabled": true
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}",
                        "disabled": true
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}",
                        "disabled": true
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}",
                        "disabled": true
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0",
                        "disabled": true
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0",
                        "disabled": true
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"Datetime\": 1683527790938,\r\n    \"Hash\": \"fadec70340e7f54f8c5076dea96ad1229bc774cded56b55a261db711b8a647a2\",\r\n    \"Message\": \"%20%23\\u66d6\\u6627\\u77ac\\u9593 %0A00 \\u9ede\\u5230 01 \\u9ede %0A[\\u958b\\u670d\\u7d2f\\u8a08] %0A\\u7e3d\\u5e33\\u865f\\u6578: 3203 %0A\\u7e3d\\u88dd\\u7f6e\\u6578: 186 %0A %0A[\\u6574\\u9ede\\u5340\\u9593] %0A\\u4e0d\\u91cd\\u8907\\u767b\\u5165\\u6578: 0 %0A\\u65b0\\u589e\\u5e33\\u865f\\u6578: 0 %0A\\u4e0d\\u91cd\\u8907\\u88dd\\u7f6e\\u6578: 0 %0AApple\\u6263\\u9ede: 0 %0AGoogle\\u6263\\u9ede: 0 %0AGASH\\u6263\\u9ede: 0 %0A %0A[\\u7576\\u65e5\\u7d2f\\u8a08] %0A\\u4e0d\\u91cd\\u8907\\u767b\\u5165\\u6578: 0 %0A\\u65b0\\u589e\\u5e33\\u865f\\u6578: 0 %0A\\u4e0d\\u91cd\\u8907\\u88dd\\u7f6e\\u6578: 0 %0AApple\\u6263\\u9ede: 0 %0AGoogle\\u6263\\u9ede: 0 %0AGASH\\u6263\\u9ede: 0\",\r\n    \"ParseMode\": 2,\r\n    \"GameID\": 979\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Bot/Telegram/SendMessage",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Bot", "Telegram", "SendMessage"]
                }
            },
            "response": []
        },
        {
            "name": "Coupon/Redeem",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"CouponID\": \"Q16022381\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Coupon/Redeem",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Coupon", "Redeem"]
                }
            },
            "response": []
        },
        {
            "name": "Document/GetAnnouncement",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "GameLocale",
                        "value": "en-us",
                        "type": "text",
                        "disabled": true
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Document/GetAnnouncement",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Document", "GetAnnouncement"]
                }
            },
            "response": []
        },
        {
            "name": "Document/GetProvision",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Document/GetProvision",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Document", "GetProvision"]
                }
            },
            "response": []
        },
        {
            "name": "Event/Push - 1",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"Country\": \"TW\",\r\n    \"Events\": [\r\n        {\r\n            \"CharacterID\": \"TinoTestCharacterDev\",\r\n            \"DateTime\": 1638788114,\r\n            \"EventType\": 1,\r\n            \"EventValue\": {\r\n                \"MobileID\": \"16D27E71-0545-4644-ABCD-23036F606101\"\r\n            },\r\n            \"ServerID\": \"TestServer\"\r\n        }\r\n    ]\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Event/Push",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Event", "Push"]
                }
            },
            "response": []
        },
        {
            "name": "Event/Push - 2",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"Country\": \"TW\",\r\n    \"Events\": [\r\n        {\r\n            \"CharacterID\": \"TestCharacter\",\r\n            \"DateTime\": 1638516920000,\r\n            \"EventType\": 2,\r\n            \"EventValue\": {\r\n                \"Character\": \"\\u738b\\u5c0f\\u660e\"\r\n            },\r\n            \"ServerID\": \"TestServer\"\r\n        }\r\n    ]\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Event/Push",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Event", "Push"]
                }
            },
            "response": []
        },
        {
            "name": "Event/Push - 3",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"Country\": \"TW\",\r\n    \"Events\": [\r\n        {\r\n            \"CharacterID\": \"TestCharacter\",\r\n            \"DateTime\": 1638516937000,\r\n            \"EventType\": 3,\r\n            \"EventValue\": {\r\n                \"Currency\": \"TWD\",\r\n                \"Price\": 99\r\n            },\r\n            \"ServerID\": \"TestServer\"\r\n        }\r\n    ]\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Event/Push",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Event", "Push"]
                }
            },
            "response": []
        },
        {
            "name": "GetRule.json",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "https://gamania-galaxy.s3-ap-northeast-1.amazonaws.com/Document/541/GetRule.json",
                    "protocol": "https",
                    "host": [
                        "gamania-galaxy",
                        "s3-ap-northeast-1",
                        "amazonaws",
                        "com"
                    ],
                    "path": ["Document", "541", "GetRule.json"]
                }
            },
            "response": []
        },
        {
            "name": "GetProvision.json",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "https://gamania-galaxy.s3-ap-northeast-1.amazonaws.com/Document/541/GetProvision.json",
                    "protocol": "https",
                    "host": [
                        "gamania-galaxy",
                        "s3-ap-northeast-1",
                        "amazonaws",
                        "com"
                    ],
                    "path": ["Document", "541", "GetProvision.json"]
                }
            },
            "response": []
        },
        {
            "name": "HealthCheck",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/HealthCheck",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["HealthCheck"]
                }
            },
            "response": []
        },
        {
            "name": "HealthCheck/php",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/HealthChecks",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["HealthChecks"]
                }
            },
            "response": []
        },
        {
            "name": "IIO/GetCharactorByOpenID",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "20dcad5fd2734008b4bab37727dc15e0_oat",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n   \"openID\": 1017606000012002312,\r\n   \"serviceCode\": \"611648\",\r\n   \"serviceRegion\": \"I0\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/IIO/GetCharactorByOpenID",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["IIO", "GetCharactorByOpenID"]
                }
            },
            "response": []
        },
        {
            "name": "IIO/ItemToGame",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "var dateTime__ms = parseInt(Date.now()); // milliseconds\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"DateTime__ms\", dateTime__ms);\r",
                            "\r",
                            "var token = '20dcad5fd2734008b4bab37727dc15e0_oat';\r",
                            "var secretKey = token + dateTime__ms;\r",
                            "// console.log('secretKey', secretKey);\r",
                            "\r",
                            "// replace request body \"{{DateTime__ms}}\" -> datetime(ms)(int)\r",
                            "let requestDataString = request.data.replace(/{{DateTime__ms}}/gi, dateTime__ms);\r",
                            "\r",
                            "let requestData = JSON.parse(requestDataString);\r",
                            "requestData.timestamp = dateTime__ms; // setting parameter: timestamp, for generate AuthToken\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "// console.log('requestDataJSON', requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "// console.log('requestDataBase64Encoded', requestDataBase64Encoded);\r",
                            "\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(requestDataBase64Encoded, secretKey);\r",
                            "let Hash = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "// console.log('Hash', Hash);\r",
                            "postman.setEnvironmentVariable(\"Hash\", Hash);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "20dcad5fd2734008b4bab37727dc15e0_oat",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "x-beanfun-s",
                        "value": "{{DateTime__ms}}",
                        "type": "text"
                    },
                    {
                        "key": "x-beanfun-signature",
                        "value": "{{Hash}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"transactionID\": \"MFJEN22710\",\r\n    \"accountID\": \"4560990566794240\",\r\n    \"assetID\": \"1817FDD6AD76537D2F76932096\",\r\n    \"itemKey\": \"WPODMAAH\",\r\n    \"sn\": \"PPPWOMEQM\",\r\n    \"gameItemID\": \"201\",\r\n    \"serviceCode\": \"611648\",\r\n    \"serviceRegion\": \"I0\",\r\n    \"fieldList\": [\r\n        {\r\n            \"name\": \"server\",\r\n            \"data\": \"ABCD\"\r\n        },\r\n        {\r\n            \"name\": \"character\",\r\n            \"data\": \"EFGH\"\r\n        }\r\n    ],\r\n    \"nonce\": \"Ee1rKy3sek44axiFdXWw4=\",\r\n    \"timestamp\": {{DateTime__ms}}\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/IIO/ItemToGame",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["IIO", "ItemToGame"]
                }
            },
            "response": []
        },
        {
            "name": "ItemToGame/BeanfunBonus/Redeem",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"RedeemID\": \"3814F8-9D9F2D-874213BBF3\",\r\n    \"UserObjectID\": 100125\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/ItemToGame/BeanfunBonus/Redeem",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["ItemToGame", "BeanfunBonus", "Redeem"]
                }
            },
            "response": []
        },
        {
            "name": "ItemToGame/Done",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"Orders\": [\r\n        {\r\n            \"OrderType\": 2,\r\n            \"WebshopOrderID\": \"23110209433799C608354D51\"\r\n        }\r\n    ],\r\n    \"UserObjectID\": 100844\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/ItemToGame/Done",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["ItemToGame", "Done"]
                }
            },
            "response": []
        },
        {
            "name": "ItemToGame/Game/Buff/Get",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "/**\r",
                            " * Generate request `Hash`.\r",
                            " */\r",
                            "\r",
                            "let requestDataString = request.data;\r",
                            "let requestData = JSON.parse(requestDataString);\r",
                            "// console.log('requestData', JSON.stringify(requestData.Data));\r",
                            "\r",
                            "const JWTSignatureKey = 'FD23C7CDD04EC87F21BEE5546D38042571B02A2D4'; // pm.environment.get('GameToken--Key');\r",
                            "let signature = JSON.stringify(requestData.Data) + JWTSignatureKey;\r",
                            "// console.log('signature', signature);\r",
                            "\r",
                            "let requestSignatureString = CryptoJS.SHA256(signature).toString().toUpperCase();\r",
                            "// console.log(requestData.OpenID, JWTSignatureKey, requestSignatureString);\r",
                            "postman.setEnvironmentVariable(\"Hash\", requestSignatureString);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}",
                        "disabled": true
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}",
                        "disabled": true
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}",
                        "disabled": true
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}",
                        "disabled": true
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0",
                        "disabled": true
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0",
                        "disabled": true
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"Data\": [\r\n        {\r\n            \"OpenID\": \"1016475000212002919\"\r\n        }\r\n    ],\r\n    \"PlatformType\": 1,\r\n    \"GameID\": 888,\r\n    \"Hash\": \"{{Hash}}\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/ItemToGame/Game/Buff/Get",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["ItemToGame", "Game", "Buff", "Get"]
                }
            },
            "response": []
        },
        {
            "name": "User/Lock",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "/**\r",
                            " * Generate request `Hash`.\r",
                            " */\r",
                            "\r",
                            "let requestDataString = request.data;\r",
                            "let requestData = JSON.parse(requestDataString);\r",
                            "// console.log('requestData', JSON.stringify(requestData.Data));\r",
                            "\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = requestData.OpenID + requestData.LockType + JWTSignatureKey;\r",
                            "// console.log('signature', signature);\r",
                            "\r",
                            "let requestSignatureString = CryptoJS.SHA256(signature).toString().toUpperCase();\r",
                            "// console.log(requestData.OpenID, JWTSignatureKey, requestSignatureString);\r",
                            "postman.setEnvironmentVariable(\"Hash\", requestSignatureString);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}",
                        "disabled": true
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}",
                        "disabled": true
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}",
                        "disabled": true
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}",
                        "disabled": true
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0",
                        "disabled": true
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0",
                        "disabled": true
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"PlatformType\": 1,\r\n    \"GameID\": 541,\r\n    \"OpenID\": \"1010005000123002400\",\r\n    \"LockType\": 3,\r\n    \"Hash\": \"{{Hash}}\",\r\n    \"ApplyNo\": 1689\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/Lock",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "Lock"]
                }
            },
            "response": []
        },
        {
            "name": "User/UnLock",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "/**\r",
                            " * Generate request `Hash`.\r",
                            " */\r",
                            "\r",
                            "let requestDataString = request.data;\r",
                            "let requestData = JSON.parse(requestDataString);\r",
                            "// console.log('requestData', JSON.stringify(requestData.Data));\r",
                            "\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = requestData.OpenID + requestData.UnLockType + JWTSignatureKey;\r",
                            "// console.log('signature', signature);\r",
                            "\r",
                            "let requestSignatureString = CryptoJS.SHA256(signature).toString().toUpperCase();\r",
                            "// console.log(requestData.OpenID, JWTSignatureKey, requestSignatureString);\r",
                            "postman.setEnvironmentVariable(\"Hash\", requestSignatureString);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}",
                        "disabled": true
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}",
                        "disabled": true
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}",
                        "disabled": true
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}",
                        "disabled": true
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0",
                        "disabled": true
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0",
                        "disabled": true
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"PlatformType\": 1,\r\n    \"GameID\": 541,\r\n    \"OpenID\": \"1010005000123002400\",\r\n    \"UnLockType\": 3,\r\n    \"Hash\": \"{{Hash}}\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/UnLock",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "UnLock"]
                }
            },
            "response": []
        },
        {
            "name": "User/GetStatus",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "/**\r",
                            " * Generate request `Hash`.\r",
                            " */\r",
                            "\r",
                            "let requestDataString = request.data;\r",
                            "let requestData = JSON.parse(requestDataString);\r",
                            "// console.log('requestData', JSON.stringify(requestData.Data));\r",
                            "\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = requestData.PlatformType + requestData.OpenID + JWTSignatureKey;\r",
                            "// console.log('signature', signature);\r",
                            "\r",
                            "let requestSignatureString = CryptoJS.SHA256(signature).toString().toUpperCase();\r",
                            "// console.log(requestData.OpenID, JWTSignatureKey, requestSignatureString);\r",
                            "postman.setEnvironmentVariable(\"Hash\", requestSignatureString);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}",
                        "disabled": true
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}",
                        "disabled": true
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}",
                        "disabled": true
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}",
                        "disabled": true
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0",
                        "disabled": true
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0",
                        "disabled": true
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"PlatformType\": 1,\r\n    \"GameID\": 898,\r\n    \"OpenID\": \"1010005000123002400\",\r\n    \"Hash\": \"{{Hash}}\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/GetStatus",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "GetStatus"]
                }
            },
            "response": []
        },
        {
            "name": "User/Delete-thirdparty",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "/**\r",
                            " * Generate request `Hash`.\r",
                            " */\r",
                            "\r",
                            "let requestDataString = request.data;\r",
                            "let requestData = JSON.parse(requestDataString);\r",
                            "// console.log('requestData', JSON.stringify(requestData.Data));\r",
                            "\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = requestData.GameID + requestData.UserObjectName + JWTSignatureKey;\r",
                            "// console.log('signature', signature);\r",
                            "\r",
                            "let requestSignatureString = CryptoJS.SHA256(signature).toString().toUpperCase();\r",
                            "// console.log(requestData.OpenID, JWTSignatureKey, requestSignatureString);\r",
                            "postman.setEnvironmentVariable(\"Hash\", requestSignatureString);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}",
                        "disabled": true
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}",
                        "disabled": true
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}",
                        "disabled": true
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}",
                        "disabled": true
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0",
                        "disabled": true
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0",
                        "disabled": true
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"GameID\": 541,\r\n    \"UserObjectName\": \"5581568307741696\",\r\n    \"Hash\": \"{{Hash}}\",\r\n    \"ApplyNo\": \"tinotest\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/Delete",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "Delete"]
                }
            },
            "response": []
        },
        {
            "name": "ItemToGame/Game/Buff/Set",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "/**\r",
                            " * Generate request `Hash`.\r",
                            " */\r",
                            "\r",
                            "let requestDataString = request.data;\r",
                            "let requestData = JSON.parse(requestDataString);\r",
                            "// console.log(requestData);\r",
                            "\r",
                            "const JWTSignatureKey = 'FD23C7CDD04EC87F21BEE5546D38042571B02A2D4'; // pm.environment.get('GameToken--Key');\r",
                            "\r",
                            "let signature = requestData.OpenID + requestData.Status + JWTSignatureKey;\r",
                            "let requestSignatureString = CryptoJS.SHA256(signature).toString();\r",
                            "// console.log(requestData.OpenID, JWTSignatureKey, requestSignatureString);\r",
                            "postman.setEnvironmentVariable(\"Hash\", requestSignatureString);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}",
                        "disabled": true
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}",
                        "disabled": true
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}",
                        "disabled": true
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}",
                        "disabled": true
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0",
                        "disabled": true
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0",
                        "disabled": true
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"PlatformType\": 1,\r\n    \"GameID\": 888,\r\n    \"OpenID\": \"1016475000212002919\",\r\n    \"Status\": 1,\r\n    \"Hash\": \"{{Hash}}\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/ItemToGame/Game/Buff/Set",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["ItemToGame", "Game", "Buff", "Set"]
                }
            },
            "response": []
        },
        {
            "name": "ItemToGame/GetThirdPartyInfo",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"PlatformType\": 1,\r\n    \"InfoType\": 1\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/ItemToGame/GetThirdPartyInfo",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["ItemToGame", "GetThirdPartyInfo"]
                }
            },
            "response": []
        },
        {
            "name": "ItemToGame/IIO/GetItemList",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/ItemToGame/IIO/GetItemList",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["ItemToGame", "IIO", "GetItemList"]
                }
            },
            "response": []
        },
        {
            "name": "ItemToGame/IIO/ItemToBag",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"CharacterID\": \"Hao\",\r\n    \"Items\": [\r\n        {\r\n            \"Amount\": 1,\r\n            \"GameItemID\": \"110365\",\r\n            \"ItemKey\": [\r\n                \"HANSONTEST001\"\r\n            ],\r\n            \"VariableAttributes\": {\r\n                \"attribute\": [\r\n                    {\r\n                        \"display\": \"Y\",\r\n                        \"key\": \"level\",\r\n                        \"name\": \"等級\",\r\n                        \"value\": \"V7\"\r\n                    },\r\n                    {\r\n                        \"display\": \"Y\",\r\n                        \"key\": \"property\",\r\n                        \"name\": \"屬性\",\r\n                        \"value\": \"火\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ],\r\n    \"UserObjectID\": 115260,\r\n    \"ServerID\": \"一般伺服器\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/ItemToGame/IIO/ItemToBag",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["ItemToGame", "IIO", "ItemToBag"]
                }
            },
            "response": []
        },
        {
            "name": "ItemToGame/IntoBag",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"RedeemID\": \"88E2FB-71C931-3536DAD585\",\r\n    \"UserObjectID\": 111951\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/ItemToGame/IntoBag",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["ItemToGame", "IntoBag"]
                }
            },
            "response": []
        },
        {
            "name": "ItemToGame/Receipt/Verify",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"Orders\": [\r\n        {\r\n            \"OrderType\": 2,\r\n            \"WebshopOrderID\": \"SANDBOX-945185706-1705648408\"\r\n        }\r\n    ],\r\n    \"UserObjectID\": 101614\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/ItemToGame/Receipt/Verify",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["ItemToGame", "Receipt", "Verify"]
                }
            },
            "response": []
        },
        {
            "name": "ItemToGame/Redeem",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "/**\r",
                            " * Generate request `Hash`.\r",
                            " */\r",
                            "\r",
                            "let requestDataString = request.data;\r",
                            "let requestData = JSON.parse(requestDataString);\r",
                            "// console.log(JSON.stringify(requestData.Data));\r",
                            "\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = requestData.OpenID + requestData.CouponID + JWTSignatureKey;\r",
                            "let requestSignatureString = CryptoJS.SHA256(signature).toString();\r",
                            "// console.log(requestData.OpenID, JWTSignatureKey, requestSignatureString);\r",
                            "postman.setEnvironmentVariable(\"Hash\", requestSignatureString);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}",
                        "disabled": true
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}",
                        "disabled": true
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}",
                        "disabled": true
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}",
                        "disabled": true
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0",
                        "disabled": true
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0",
                        "disabled": true
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"PlatformType\": 1,\r\n    \"GameID\": 888,\r\n    \"OpenID\": \"1016475000212002919\",\r\n    \"CouponID\": \"Q80846865\",\r\n    \"Hash\": \"{{Hash}}\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/ItemToGame/Redeem",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["ItemToGame", "Redeem"]
                }
            },
            "response": []
        },
        {
            "name": "Media/GetUploadUrl",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Media/GetUploadUrl",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Media", "GetUploadUrl"]
                }
            },
            "response": []
        },
        {
            "name": "Media/UploadFile",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "PUT",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}",
                        "disabled": true
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}",
                        "disabled": true
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0",
                        "disabled": true
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0",
                        "disabled": true
                    }
                ],
                "body": {
                    "mode": "file",
                    "file": {
                        "src": ""
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Media/UploadFile/{{GameID}}",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Media", "UploadFile", "{{GameID}}"]
                }
            },
            "response": []
        },
        {
            "name": "Notify/RegisterMobileDevice",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"DeviceType\": 1,\r\n    \"DeviceToken\": \"d9kW-lRXEUMIjfmikHT6iH:APA91bGqw8ww3meunM3IydL8tIBEeit7nexJD-j_aS_9EmvwoHffbL9ORo4NNQ39Lp_NkG0rXnX_uWfaMxeI2yO0EUlWAx82qCTM_Zg0LMlyuSNuWKHDzf57HDTDku2xOLlaEh8xCWYs\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Notify/RegisterMobileDevice",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Notify", "RegisterMobileDevice"]
                }
            },
            "response": []
        },
        {
            "name": "Notify/SendMessage",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"MessageTitle\": \"Message title\",\r\n    \"MessageBody\": \"Message from API: Notify/SendMessage✌\",\r\n    \"UserTag\": [\r\n        9\r\n    ]\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Notify/SendMessage",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Notify", "SendMessage"]
                }
            },
            "response": []
        },
        {
            "name": "Transaction/Verify - AppStore Kit2",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "\r",
                            "// console.log('requestDataJSON', requestDataJSON)\r",
                            "\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', requestDataBase64Encoded.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'));\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = requestSignatureBase64String.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "2.0.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"OrderID\": \"2000000506915422\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Transaction/Verify",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Transaction", "Verify"]
                }
            },
            "response": []
        },
        {
            "name": "Order/Verify - AppStore",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "\r",
                            "// console.log('requestDataJSON', requestDataJSON)\r",
                            "\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', requestDataBase64Encoded.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'));\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = requestSignatureBase64String.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "2.0.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"Country\": \"TW\",\r\n    \"Currency\": \"TWD\",\r\n    \"OrderID\": \"2000000454874898\",\r\n    \"PaymentToken\": \"MIIV1wYJKoZIhvcNAQcCoIIVyDCCFcQCAQExCzAJBgUrDgMCGgUAMIIFFQYJKoZIhvcNAQcBoIIFBgSCBQIxggT+MAoCAQgCAQEEAhYAMAoCARQCAQEEAgwAMAsCAQECAQEEAwIBADALAgEDAgEBBAMMATEwCwIBCwIBAQQDAgEAMAsCAQ8CAQEEAwIBADALAgEQAgEBBAMCAQAwCwIBGQIBAQQDAgEDMAwCAQoCAQEEBBYCNCswDAIBDgIBAQQEAgIBGjANAgENAgEBBAUCAwKYEzANAgETAgEBBAUMAzEuMDAOAgEJAgEBBAYCBFAzMDIwGAIBBAIBAgQQSmTd3wFcVhl48BbaoLZGZjAbAgEAAgEBBBMMEVByb2R1Y3Rpb25TYW5kYm94MBwCAQUCAQEEFIRBvmry7w5AukWRZdO9FgN9yDTJMB4CAQwCAQEEFhYUMjAyMy0xMS0wOVQwODo1Mjo1NFowHgIBEgIBAQQWFhQyMDEzLTA4LTAxVDA3OjAwOjAwWjAgAgECAgEBBBgMFmNvbS5nYW1hbmlhLmdhbGF4eXRlc3QwSAIBBwIBAQRAIb9IhUP8r0LuPOopubpQ65unkBCkPqbz5+hp+zdRBk0t8FgtoXLcVqUroQZXxiOsaL3Fpr+Mc6XZqBY3aQGpijBbAgEGAgEBBFN6H4ImT1wHV40C6OSaU96hoLXkMOIRG3OxEor0xFmIcu244B6/m42qj3L+VcS2//k9ou9FPwOK9Pwm/Xh8Oqihs/RYULZC5dSP3NodAYEgW/zllTCCAW4CARECAQEEggFkMYIBYDALAgIGrAIBAQQCFgAwCwICBq0CAQEEAgwAMAsCAgawAgEBBAIWADALAgIGsgIBAQQCDAAwCwICBrMCAQEEAgwAMAsCAga0AgEBBAIMADALAgIGtQIBAQQCDAAwCwICBrYCAQEEAgwAMAwCAgalAgEBBAMCAQEwDAICBqsCAQEEAwIBATAMAgIGrgIBAQQDAgEAMAwCAgavAgEBBAMCAQAwDAICBrECAQEEAwIBADAMAgIGugIBAQQDAgEAMBsCAganAgEBBBIMEDIwMDAwMDA0NTQ4NzQ4OTgwGwICBqkCAQEEEgwQMjAwMDAwMDQ1NDg3NDg5ODAfAgIGqAIBAQQWFhQyMDIzLTExLTA5VDA4OjUyOjU0WjAfAgIGqgIBAQQWFhQyMDIzLTExLTA5VDA4OjUyOjU0WjAmAgIGpgIBAQQdDBtjb20uZ2FtYW5pYS5nYWxheHl0ZXN0LnQwMDEwggF6AgERAgEBBIIBcDGCAWwwCwICBqwCAQEEAhYAMAsCAgatAgEBBAIMADALAgIGsAIBAQQCFgAwCwICBrICAQEEAgwAMAsCAgazAgEBBAIMADALAgIGtAIBAQQCDAAwCwICBrUCAQEEAgwAMAsCAga2AgEBBAIMADAMAgIGpQIBAQQDAgEBMAwCAgarAgEBBAMCAQIwDAICBq4CAQEEAwIBADAMAgIGrwIBAQQDAgEAMAwCAgaxAgEBBAMCAQAwDAICBroCAQEEAwIBADAbAgIGpwIBAQQSDBAyMDAwMDAwMzM3ODU3Nzk5MBsCAgapAgEBBBIMEDIwMDAwMDAzMzc4NTc3OTkwHwICBqgCAQEEFhYUMjAyMy0wNS0yNVQwOTozMToxOFowHwICBqoCAQEEFhYUMjAyMy0wNS0yNVQwOTozMToxOFowMgICBqYCAQEEKQwnY29tLmdhbWFuaWEuZ2FsYXh5Tm9uUmVuZXdhYmxldGVzdC50MDAxoIIO4jCCBcYwggSuoAMCAQICEC2rAxu91mVz0gcpeTxEl8QwDQYJKoZIhvcNAQEFBQAwdTELMAkGA1UEBhMCVVMxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAsMAkc3MUQwQgYDVQQDDDtBcHBsZSBXb3JsZHdpZGUgRGV2ZWxvcGVyIFJlbGF0aW9ucyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0yMjEyMDIyMTQ2MDRaFw0yMzExMTcyMDQwNTJaMIGJMTcwNQYDVQQDDC5NYWMgQXBwIFN0b3JlIGFuZCBpVHVuZXMgU3RvcmUgUmVjZWlwdCBTaWduaW5nMSwwKgYDVQQLDCNBcHBsZSBXb3JsZHdpZGUgRGV2ZWxvcGVyIFJlbGF0aW9uczETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDA3cautOi8bevBfbXOmFn2UFi2QtyV4xrF9c9kqn/SzGFM1hTjd4HEWTG3GcdNS6udJ6YcPlRyUCIePTAdSg5G5dgmKRVL4yCcrtXzJWPQmNRx+G6W846gCsUENek496v4O5TaB+VbOYX/nXlA9BoKrpVZmNMcXIpsBX2aHzRFwQTN1cmSpUYXBqykhfN3XB+F96NB5tsTEG9t8CHqrCamZj1eghXHXJsplk1+ik6OeLtXyTWUe7YAzhgKi3WVm+nDFD7BEDQEbbc8NzPfzRQ+YgzA3y9yu+1Kv+PIaQ1+lm0dTxA3btP8PRoGfWwBFMjEXzFqUvEzBchg48YDzSaBAgMBAAGjggI7MIICNzAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFF1CEGwbu8dSl05EvRMnuToSd4MrMHAGCCsGAQUFBwEBBGQwYjAtBggrBgEFBQcwAoYhaHR0cDovL2NlcnRzLmFwcGxlLmNvbS93d2RyZzcuZGVyMDEGCCsGAQUFBzABhiVodHRwOi8vb2NzcC5hcHBsZS5jb20vb2NzcDAzLXd3ZHJnNzAxMIIBHwYDVR0gBIIBFjCCARIwggEOBgoqhkiG92NkBQYBMIH/MDcGCCsGAQUFBwIBFitodHRwczovL3d3dy5hcHBsZS5jb20vY2VydGlmaWNhdGVhdXRob3JpdHkvMIHDBggrBgEFBQcCAjCBtgyBs1JlbGlhbmNlIG9uIHRoaXMgY2VydGlmaWNhdGUgYnkgYW55IHBhcnR5IGFzc3VtZXMgYWNjZXB0YW5jZSBvZiB0aGUgdGhlbiBhcHBsaWNhYmxlIHN0YW5kYXJkIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHVzZSwgY2VydGlmaWNhdGUgcG9saWN5IGFuZCBjZXJ0aWZpY2F0aW9uIHByYWN0aWNlIHN0YXRlbWVudHMuMDAGA1UdHwQpMCcwJaAjoCGGH2h0dHA6Ly9jcmwuYXBwbGUuY29tL3d3ZHJnNy5jcmwwHQYDVR0OBBYEFLJFfcNEimtMSa9uUd4XyVFG7/s0MA4GA1UdDwEB/wQEAwIHgDAQBgoqhkiG92NkBgsBBAIFADANBgkqhkiG9w0BAQUFAAOCAQEAd4oC3aSykKWsn4edfl23vGkEoxr/ZHHT0comoYt48xUpPnDM61VwJJtTIgm4qzEslnj4is4Wi88oPhK14Xp0v0FMWQ1vgFYpRoGP7BWUD1D3mbeWf4Vzp5nsPiakVOzHvv9+JH/GxOZQFfFZG+T3hAcrFZSzlunYnoVdRHSuRdGo7/ml7h1WGVpt6isbohE0DTdAFODr8aPHdpVmDNvNXxtif+UqYPY5XY4tLqHFAblHXdHKW6VV6X6jexDzA6SCv8m0VaGIWCIF+v15a2FoEP+40e5e5KzMcoRsswIVK6o5r7AF5ldbD6QopimkS4d3naMQ32LYeWhg5/pOyshkyzCCBFUwggM9oAMCAQICFDQYWP8B/gY/jvGfH+k8AbTBRv/JMA0GCSqGSIb3DQEBBQUAMGIxCzAJBgNVBAYTAlVTMRMwEQYDVQQKEwpBcHBsZSBJbmMuMSYwJAYDVQQLEx1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEWMBQGA1UEAxMNQXBwbGUgUm9vdCBDQTAeFw0yMjExMTcyMDQwNTNaFw0yMzExMTcyMDQwNTJaMHUxCzAJBgNVBAYTAlVTMRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQLDAJHNzFEMEIGA1UEAww7QXBwbGUgV29ybGR3aWRlIERldmVsb3BlciBSZWxhdGlvbnMgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCsrtHTtoqxGyiVrd5RUUw/M+FOXK+z/ALSZU8q1HRojHUXZc8o5EgJmHFSMiwWTniOklZkqd2LzeLUxzuiEkU3AhliZC9/YcbTWSK/q/kUo+22npm6L/Gx3DBCT7a2ssZ0qmJWu+1ENg/R5SB0k1c6XZ7cAfx4b2kWNcNuAcKectRxNrF2CXq+DSqX8bBeCxsSrSurB99jLfWI6TISolVYQ3Y8PReAHynbsamfq5YFnRXc3dtOD+cTfForLgJB9u56arZzYPeXGRSLlTM4k9oAJTauVVp8n/n0YgQHdOkdp5VXI6wrJNpkTyhy6ZawCDyIGxRjQ9eJrpjB8i2O41ElAgMBAAGjge8wgewwEgYDVR0TAQH/BAgwBgEB/wIBADAfBgNVHSMEGDAWgBQr0GlHlHYJ/vRrjS5ApvdHTX8IXjBEBggrBgEFBQcBAQQ4MDYwNAYIKwYBBQUHMAGGKGh0dHA6Ly9vY3NwLmFwcGxlLmNvbS9vY3NwMDMtYXBwbGVyb290Y2EwLgYDVR0fBCcwJTAjoCGgH4YdaHR0cDovL2NybC5hcHBsZS5jb20vcm9vdC5jcmwwHQYDVR0OBBYEFF1CEGwbu8dSl05EvRMnuToSd4MrMA4GA1UdDwEB/wQEAwIBBjAQBgoqhkiG92NkBgIBBAIFADANBgkqhkiG9w0BAQUFAAOCAQEAUqMIKRNlt7Uf5jQD7fYYd7w9yie1cOzsbDNL9pkllAeeITMDavV9Ci4r3wipgt5Kf+HnC0sFuCeYSd3BDIbXgWSugpzERfHqjxwiMOOiJWFEif6FelbwcpJ8DERUJLe1pJ8m8DL5V51qeWxA7Q80BgZC/9gOMWVt5i4B2Qa/xcoNrkfUBReIPOmc5BlkbYqUrRHcAfbleK+t6HDXDV2BPkYqLK4kocfS4H2/HfU2a8XeqQqagLERXrJkfrPBV8zCbFmZt/Sw3THaSNZqge6yi1A1FubnXHFibrDyUeKobfgqy2hzxqbEGkNJAT6pqQCKhmyDiNJccFd62vh2zBnVsDCCBLswggOjoAMCAQICAQIwDQYJKoZIhvcNAQEFBQAwYjELMAkGA1UEBhMCVVMxEzARBgNVBAoTCkFwcGxlIEluYy4xJjAkBgNVBAsTHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRYwFAYDVQQDEw1BcHBsZSBSb290IENBMB4XDTA2MDQyNTIxNDAzNloXDTM1MDIwOTIxNDAzNlowYjELMAkGA1UEBhMCVVMxEzARBgNVBAoTCkFwcGxlIEluYy4xJjAkBgNVBAsTHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRYwFAYDVQQDEw1BcHBsZSBSb290IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5JGpCR+R2x5HUOsF7V55hC3rNqJXTFXsixmJ3vlLbPUHqyIwAugYPvhQCdN/QaiY+dHKZpwkaxHQo7vkGyrDH5WeegykR4tb1BY3M8vED03OFGnRyRly9V0O1X9fm/IlA7pVj01dDfFkNSMVSxVZHbOU9/acns9QusFYUGePCLQg98usLCBvcLY/ATCMt0PPD5098ytJKBrI/s61uQ7ZXhzWyz21Oq30Dw4AkguxIRYudNU8DdtiFqujcZJHU1XBry9Bs/j743DN5qNMRX4fTGtQlkGJxHRiCxCDQYczioGxMFjsWgQyjGizjx3eZXP/Z15lvEnYdp8zFGWhd5TJLQIDAQABo4IBejCCAXYwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFCvQaUeUdgn+9GuNLkCm90dNfwheMB8GA1UdIwQYMBaAFCvQaUeUdgn+9GuNLkCm90dNfwheMIIBEQYDVR0gBIIBCDCCAQQwggEABgkqhkiG92NkBQEwgfIwKgYIKwYBBQUHAgEWHmh0dHBzOi8vd3d3LmFwcGxlLmNvbS9hcHBsZWNhLzCBwwYIKwYBBQUHAgIwgbYagbNSZWxpYW5jZSBvbiB0aGlzIGNlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBhc3N1bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFyZCB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGNlcnRpZmljYXRlIHBvbGljeSBhbmQgY2VydGlmaWNhdGlvbiBwcmFjdGljZSBzdGF0ZW1lbnRzLjANBgkqhkiG9w0BAQUFAAOCAQEAXDaZTC14t+2Mm9zzd5vydtJ3ME/BH4WDhRuZPUc38qmbQI4s1LGQEti+9HOb7tJkD8t5TzTYoj75eP9ryAfsfTmDi1Mg0zjEsb+aTwpr/yv8WacFCXwXQFYRHnTTt4sjO0ej1W8k4uvRt3DfD0XhJ8rxbXjt57UXF6jcfiI1yiXV2Q/Wa9SiJCMR96Gsj3OBYMYbWwkvkrL4REjwYDieFfU9JmcgijNq9w2Cz97roy/5U2pbZMBjM3f3OgcsVuvaDyEO2rpzGU+12TZ/wYdV2aeZuTJC+9jVcZ5+oVK3G72TQiQSKscPHbZNnF5jyEuAF1CqitXa5PzQCQc3sHV1ITGCAbEwggGtAgEBMIGJMHUxCzAJBgNVBAYTAlVTMRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQLDAJHNzFEMEIGA1UEAww7QXBwbGUgV29ybGR3aWRlIERldmVsb3BlciBSZWxhdGlvbnMgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkCEC2rAxu91mVz0gcpeTxEl8QwCQYFKw4DAhoFADANBgkqhkiG9w0BAQEFAASCAQBKZ5eHdkyQbPQu0+3OwygrxDGtT8KEpuhONy4bAbqk2T91dTYx6v3xjF+Pgyj4/fMBLyAvI8BM8IprmeYYiKT1whxL0GB40prJsKERDED1YDIdkMpvlP0Ou1R9FkwN1qmO3wPr1Fga2bla9NWWv4uVJDY/efLaWz7PwjUJCY7eK/5k+AlCEAy11agooHgCkGFxuZ5e5DKK9pnvjbnkji8Y2mcGgiUPJNfiSnrxhY8pMq3fLwnbxKh/l8e2pl3OnLA2sZ8WKvHIpDVDt60cvPgBPTIZMVLA2mi2w7xjL8KfxS0zJf0efXUTOzWFFE6sjSXaXhbFjcGw+0R0EHGZA4vr\",\r\n    \"PaymentType\": 1,\r\n    \"Price\": \"199\",\r\n    \"ProductObjectID\": 36\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Order/Verify",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Order", "Verify"]
                }
            },
            "response": []
        },
        {
            "name": "Order/Verify - GooglePlay",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "\r",
                            "// console.log('requestDataJSON', requestDataJSON)\r",
                            "\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', requestDataBase64Encoded.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'));\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = requestSignatureBase64String.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "console.log('signature', signature);\r",
                            "console.log('signatureBytes', signatureBytes);\r",
                            "console.log('requestSignatureBase64String', requestSignatureBase64String);\r",
                            "console.log('GameToken', GameToken);\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"Country\": \"TW\",\r\n    \"Currency\": \"TWD\",\r\n    \"OrderID\": \"GPA.3312-4738-9256-39823\",\r\n    \"PaymentToken\": \"mapiddijilicohmpdnioehio.AO-J1Ow6sga_r84j66ppvtCa-Wz79EEu_haIEIsHWr8MuvoISzPqZ6dcPlAFEkKmxjgNKxwVyyibJ7yV76C_83W_y2ELJu_FXA\",\r\n    \"PaymentType\": 2,\r\n    \"Price\": \"123\",\r\n    \"ProductObjectID\": 147,\r\n    \"Quantity\": 1\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Order/Verify",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Order", "Verify"]
                }
            },
            "response": []
        },
        {
            "name": "Order/Verify - GooglePlayPoint",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "\r",
                            "// console.log('requestDataJSON', requestDataJSON)\r",
                            "\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', requestDataBase64Encoded.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'));\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = requestSignatureBase64String.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"Country\": \"TW\",\r\n    \"Currency\": \"TWD\",\r\n    \"OrderID\": \"GPPNOID\",\r\n    \"PaymentToken\": \"pbnbehknafhfekpmofghchbe.AO-J1OxMbNlXYppNWyHDebmFF5WnS7KpR5diiE3UB3hir0jOz4p4A-p99dbHLhVop4yboIUnDMWUDhdhBHb40SFr06oAarKdZg\",\r\n    \"PaymentType\": 4,\r\n    \"Price\": \"0\",\r\n    \"ProductObjectID\": 180\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Order/Verify",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Order", "Verify"]
                }
            },
            "response": []
        },
        {
            "name": "Order/Receipt/Verify",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}",
                        "disabled": true
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}",
                        "disabled": true
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0",
                        "disabled": true
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0",
                        "disabled": true
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"OrderID\": \"GPA.3328-2589-1649-18974\",\r\n    \"PaymentType\": 2,\r\n    \"UserObjectID\": 103810\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Order/Receipt/Verify",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Order", "Receipt", "Verify"]
                }
            },
            "response": []
        },
        {
            "name": "Product/GetList",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "gameLocale",
                        "value": "en-us",
                        "type": "default",
                        "disabled": true
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"PaymentType\": 3,\r\n    \"Country\": \"TW\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Product/GetList",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Product", "GetList"]
                }
            },
            "response": []
        },
        {
            "name": "Receive/Bank",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let requestData = JSON.parse(requestDataString);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestData.Data);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('CheckSumKey');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = requestSignatureBase64String.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"Hash\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"Data\": \"20210927,\\u9280\\u884c,1,98818100210321,10,20210821160451,051094015616801100408CR+00000000000100+00000003775630\\u7db2\\u8def\\u975e\\u7d04\\u8f49\\u5e33041300009 00001808000007197917448998818007101100821160451\",\r\n    \"CheckSumValue\": \"{{Hash}}\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Receive/Bank",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Receive", "Bank"]
                }
            },
            "response": []
        },
        {
            "name": "Receive/Bank__MOCK_FROM_BANK",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"Data\": \"20220428,\\u9280\\u884c,1,98818050300055,93,20220428160451,051094015616801100408CR+00000000000100+00000003775630\\u7db2\\u8def\\u975e\\u7d04\\u8f49\\u5e33041300009 00001808000007197917448998818007101100821160451\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/esunbank",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["esunbank"]
                }
            },
            "response": []
        },
        {
            "name": "Refund/callback/541 apple",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"notification_type\": \"REFUND\",\r\n    \"environment\": \"Sandbox\",\r\n    \"unified_receipt\": {\r\n        \"status\": 0,\r\n        \"environment\": \"Sandbox\",\r\n        \"latest_receipt_info\": [\r\n            {\r\n                \"quantity\": \"1\",\r\n                \"product_id\": \"com.gamania.galaxytest.t003\",\r\n                \"transaction_id\": \"2000000506915422\",\r\n                \"purchase_date\": \"2022-02-22 07:51:31 Etc\\/GMT\",\r\n                \"purchase_date_ms\": \"1645516291000\",\r\n                \"purchase_date_pst\": \"2022-02-21 23:51:31 America\\/Los_Angeles\",\r\n                \"original_purchase_date\": \"2022-02-22 07:51:31 Etc\\/GMT\",\r\n                \"original_purchase_date_ms\": \"1645516291000\",\r\n                \"original_purchase_date_pst\": \"2022-02-21 23:51:31 America\\/Los_Angeles\",\r\n                \"is_trial_period\": \"false\",\r\n                \"original_transaction_id\": \"2000000506915422\",\r\n                \"cancellation_date\": \"2022-02-22 09:37:33 Etc\\/GMT\",\r\n                \"cancellation_date_ms\": \"1645522653000\",\r\n                \"cancellation_date_pst\": \"2022-02-22 01:37:33 America\\/Los_Angeles\",\r\n                \"cancellation_reason\": \"0\",\r\n                \"in_app_ownership_type\": \"PURCHASED\"\r\n            }\r\n        ],\r\n        \"latest_receipt\": \"MIISagYJKoZIhvcNAQcCoIISWzCCElcCAQExCzAJBgUrDgMCGgUAMIICCwYJKoZIhvcNAQcBoIIB\\/ASCAfgxggH0MAoCAQgCAQEEAhYAMAoCARQCAQEEAgwAMAsCAQECAQEEAwIBADALAgELAgEBBAMCAQAwCwIBDwIBAQQDAgEAMAsCARACAQEEAwIBADALAgEZAgEBBAMCAQMwDAIBCgIBAQQEFgI0KzAMAgEOAgEBBAQCAgCiMA0CAQ0CAQEEBQIDAknwMA0CARMCAQEEBQwDMS4wMA4CAQMCAQEEBgwEbnVsbDAOAgEJAgEBBAYCBFAyNTYwGAIBBAIBAgQQ82D8ReUTzwfX7CdpTkDYDjAbAgEAAgEBBBMMEVByb2R1Y3Rpb25TYW5kYm94MBwCAQUCAQEEFCbqbNUGVby9n\\/523IQLh\\/jhbiaoMB4CAQwCAQEEFhYUMjAyMi0wMi0yMlQwOTo1MjozNFowHgIBEgIBAQQWFhQyMDEzLTA4LTAxVDA3OjAwOjAwWjAgAgECAgEBBBgMFmNvbS5nYW1hbmlhLmdhbGF4eXRlc3QwOwIBBwIBAQQzCfSNgt42f\\/J7jbFenIIpkZCRu21sSOn8GkkdtRMb2fAH+V+sNYpjMswHvw1Z1c4VOfrTMEsCAQYCAQEEQ0DIeJYu0q9WPLBClo\\/92DLVATd5pb3DQN32rIw9OiqY0V8q78fSfjgvpaZLhCyhR9GpSgqjtyFGEQHJFbsOpkWQMLOggg5lMIIFfDCCBGSgAwIBAgIIDutXh+eeCY0wDQYJKoZIhvcNAQEFBQAwgZYxCzAJBgNVBAYTAlVTMRMwEQYDVQQKDApBcHBsZSBJbmMuMSwwKgYDVQQLDCNBcHBsZSBXb3JsZHdpZGUgRGV2ZWxvcGVyIFJlbGF0aW9uczFEMEIGA1UEAww7QXBwbGUgV29ybGR3aWRlIERldmVsb3BlciBSZWxhdGlvbnMgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTUxMTEzMDIxNTA5WhcNMjMwMjA3MjE0ODQ3WjCBiTE3MDUGA1UEAwwuTWFjIEFwcCBTdG9yZSBhbmQgaVR1bmVzIFN0b3JlIFJlY2VpcHQgU2lnbmluZzEsMCoGA1UECwwjQXBwbGUgV29ybGR3aWRlIERldmVsb3BlciBSZWxhdGlvbnMxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApc+B\\/SWigVvWh+0j2jMcjuIjwKXEJss9xp\\/sSg1Vhv+kAteXyjlUbX1\\/slQYncQsUnGOZHuCzom6SdYI5bSIcc8\\/W0YuxsQduAOpWKIEPiF41du30I4SjYNMWypoN5PC8r0exNKhDEpYUqsS4+3dH5gVkDUtwswSyo1IgfdYeFRr6IwxNh9KBgxHVPM3kLiykol9X6SFSuHAnOC6pLuCl2P0K5PB\\/T5vysH1PKmPUhrAJQp2Dt7+mf7\\/wmv1W16sc1FJCFaJzEOQzI6BAtCgl7ZcsaFpaYeQEGgmJjm4HRBzsApdxXPQ33Y72C3ZiB7j7AfP4o7Q0\\/omVYHv4gNJIwIDAQABo4IB1zCCAdMwPwYIKwYBBQUHAQEEMzAxMC8GCCsGAQUFBzABhiNodHRwOi8vb2NzcC5hcHBsZS5jb20vb2NzcDAzLXd3ZHIwNDAdBgNVHQ4EFgQUkaSc\\/MR2t5+givRN9Y82Xe0rBIUwDAYDVR0TAQH\\/BAIwADAfBgNVHSMEGDAWgBSIJxcJqbYYYIvs67r2R1nFUlSjtzCCAR4GA1UdIASCARUwggERMIIBDQYKKoZIhvdjZAUGATCB\\/jCBwwYIKwYBBQUHAgIwgbYMgbNSZWxpYW5jZSBvbiB0aGlzIGNlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBhc3N1bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFyZCB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGNlcnRpZmljYXRlIHBvbGljeSBhbmQgY2VydGlmaWNhdGlvbiBwcmFjdGljZSBzdGF0ZW1lbnRzLjA2BggrBgEFBQcCARYqaHR0cDovL3d3dy5hcHBsZS5jb20vY2VydGlmaWNhdGVhdXRob3JpdHkvMA4GA1UdDwEB\\/wQEAwIHgDAQBgoqhkiG92NkBgsBBAIFADANBgkqhkiG9w0BAQUFAAOCAQEADaYb0y4941srB25ClmzT6IxDMIJf4FzRjb69D70a\\/CWS24yFw4BZ3+Pi1y4FFKwN27a4\\/vw1LnzLrRdrjn8f5He5sWeVtBNephmGdvhaIJXnY4wPc\\/zo7cYfrpn4ZUhcoOAoOsAQNy25oAQ5H3O5yAX98t5\\/GioqbisB\\/KAgXNnrfSemM\\/j1mOC+RNuxTGf8bgpPyeIGqNKX86eOa1GiWoR1ZdEWBGLjwV\\/1CKnPaNmSAMnBjLP4jQBkulhgwHyvj3XKablbKtYdaG6YQvVMpzcZm8w7HHoZQ\\/Ojbb9IYAYMNpIr7N4YtRHaLSPQjvygaZwXG56AezlHRTBhL8cTqDCCBCIwggMKoAMCAQICCAHevMQ5baAQMA0GCSqGSIb3DQEBBQUAMGIxCzAJBgNVBAYTAlVTMRMwEQYDVQQKEwpBcHBsZSBJbmMuMSYwJAYDVQQLEx1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEWMBQGA1UEAxMNQXBwbGUgUm9vdCBDQTAeFw0xMzAyMDcyMTQ4NDdaFw0yMzAyMDcyMTQ4NDdaMIGWMQswCQYDVQQGEwJVUzETMBEGA1UECgwKQXBwbGUgSW5jLjEsMCoGA1UECwwjQXBwbGUgV29ybGR3aWRlIERldmVsb3BlciBSZWxhdGlvbnMxRDBCBgNVBAMMO0FwcGxlIFdvcmxkd2lkZSBEZXZlbG9wZXIgUmVsYXRpb25zIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyjhUpstWqsgkOUjpjO7sX7h\\/JpG8NFN6znxjgGF3ZF6lByO2Of5QLRVWWHAtfsRuwUqFPi\\/w3oQaoVfJr3sY\\/2r6FRJJFQgZrKrbKjLtlmNoUhU9jIrsv2sYleADrAF9lwVnzg6FlTdq7Qm2rmfNUWSfxlzRvFduZzWAdjakh4FuOI\\/YKxVOeyXYWr9Og8GN0pPVGnG1YJydM05V+RJYDIa4Fg3B5XdFjVBIuist5JSF4ejEncZopbCj\\/Gd+cLoCWUt3QpE5ufXN4UzvwDtIjKblIV39amq7pxY1YNLmrfNGKcnow4vpecBqYWcVsvD95Wi8Yl9uz5nd7xtj\\/pJlqwIDAQABo4GmMIGjMB0GA1UdDgQWBBSIJxcJqbYYYIvs67r2R1nFUlSjtzAPBgNVHRMBAf8EBTADAQH\\/MB8GA1UdIwQYMBaAFCvQaUeUdgn+9GuNLkCm90dNfwheMC4GA1UdHwQnMCUwI6AhoB+GHWh0dHA6Ly9jcmwuYXBwbGUuY29tL3Jvb3QuY3JsMA4GA1UdDwEB\\/wQEAwIBhjAQBgoqhkiG92NkBgIBBAIFADANBgkqhkiG9w0BAQUFAAOCAQEAT8\\/vWb4s9bJsL4\\/uE4cy6AU1qG6LfclpDLnZF7x3LNRn4v2abTpZXN+DAb2yriphcrGvzcNFMI+jgw3OHUe08ZOKo3SbpMOYcoc7Pq9FC5JUuTK7kBhTawpOELbZHVBsIYAKiU5XjGtbPD2m\\/d73DSMdC0omhz+6kZJMpBkSGW1X9XpYh3toiuSGjErr4kkUqqXdVQCprrtLMK7hoLG8KYDmCXflvjSiAcp\\/3OIK5ju4u+y6YpXzBWNBgs0POx1MlaTbq\\/nJlelP5E3nJpmB6bz5tCnSAXpm4S6M9iGKxfh44YGuv9OQnamt86\\/9OBqWZzAcUaVc7HGKgrRsDwwVHzCCBLswggOjoAMCAQICAQIwDQYJKoZIhvcNAQEFBQAwYjELMAkGA1UEBhMCVVMxEzARBgNVBAoTCkFwcGxlIEluYy4xJjAkBgNVBAsTHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRYwFAYDVQQDEw1BcHBsZSBSb290IENBMB4XDTA2MDQyNTIxNDAzNloXDTM1MDIwOTIxNDAzNlowYjELMAkGA1UEBhMCVVMxEzARBgNVBAoTCkFwcGxlIEluYy4xJjAkBgNVBAsTHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRYwFAYDVQQDEw1BcHBsZSBSb290IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5JGpCR+R2x5HUOsF7V55hC3rNqJXTFXsixmJ3vlLbPUHqyIwAugYPvhQCdN\\/QaiY+dHKZpwkaxHQo7vkGyrDH5WeegykR4tb1BY3M8vED03OFGnRyRly9V0O1X9fm\\/IlA7pVj01dDfFkNSMVSxVZHbOU9\\/acns9QusFYUGePCLQg98usLCBvcLY\\/ATCMt0PPD5098ytJKBrI\\/s61uQ7ZXhzWyz21Oq30Dw4AkguxIRYudNU8DdtiFqujcZJHU1XBry9Bs\\/j743DN5qNMRX4fTGtQlkGJxHRiCxCDQYczioGxMFjsWgQyjGizjx3eZXP\\/Z15lvEnYdp8zFGWhd5TJLQIDAQABo4IBejCCAXYwDgYDVR0PAQH\\/BAQDAgEGMA8GA1UdEwEB\\/wQFMAMBAf8wHQYDVR0OBBYEFCvQaUeUdgn+9GuNLkCm90dNfwheMB8GA1UdIwQYMBaAFCvQaUeUdgn+9GuNLkCm90dNfwheMIIBEQYDVR0gBIIBCDCCAQQwggEABgkqhkiG92NkBQEwgfIwKgYIKwYBBQUHAgEWHmh0dHBzOi8vd3d3LmFwcGxlLmNvbS9hcHBsZWNhLzCBwwYIKwYBBQUHAgIwgbYagbNSZWxpYW5jZSBvbiB0aGlzIGNlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBhc3N1bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFyZCB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGNlcnRpZmljYXRlIHBvbGljeSBhbmQgY2VydGlmaWNhdGlvbiBwcmFjdGljZSBzdGF0ZW1lbnRzLjANBgkqhkiG9w0BAQUFAAOCAQEAXDaZTC14t+2Mm9zzd5vydtJ3ME\\/BH4WDhRuZPUc38qmbQI4s1LGQEti+9HOb7tJkD8t5TzTYoj75eP9ryAfsfTmDi1Mg0zjEsb+aTwpr\\/yv8WacFCXwXQFYRHnTTt4sjO0ej1W8k4uvRt3DfD0XhJ8rxbXjt57UXF6jcfiI1yiXV2Q\\/Wa9SiJCMR96Gsj3OBYMYbWwkvkrL4REjwYDieFfU9JmcgijNq9w2Cz97roy\\/5U2pbZMBjM3f3OgcsVuvaDyEO2rpzGU+12TZ\\/wYdV2aeZuTJC+9jVcZ5+oVK3G72TQiQSKscPHbZNnF5jyEuAF1CqitXa5PzQCQc3sHV1ITGCAcswggHHAgEBMIGjMIGWMQswCQYDVQQGEwJVUzETMBEGA1UECgwKQXBwbGUgSW5jLjEsMCoGA1UECwwjQXBwbGUgV29ybGR3aWRlIERldmVsb3BlciBSZWxhdGlvbnMxRDBCBgNVBAMMO0FwcGxlIFdvcmxkd2lkZSBEZXZlbG9wZXIgUmVsYXRpb25zIENlcnRpZmljYXRpb24gQXV0aG9yaXR5AggO61eH554JjTAJBgUrDgMCGgUAMA0GCSqGSIb3DQEBAQUABIIBAEIo6MQ8ypTHWYFLuCfNVA25H+\\/sCW7ZhcVju9PT0DVh\\/q3rNNUZ5sV0EUaIgNS6XbgR9dJcbxMWWdvi\\/XCGITxoJ9F+U+CUrHQ5GbKMSv+XhYnDxlqkAjF+OC\\/kRcdzb5FWiVmrRwABmQLM1wvBYTQ\\/5dhuqN4DzFKjP0Obut9nDtRaZ3bgENTI5cY18ReQieZZRms50sRDZI6W5fXNJs1EhRHTsyvMJmxSsF2YcbZkeD6XKApgCxawXcIhAaaY+6aWMNIXTjZRDdoqn3GTOW4h\\/cXCyHQToS1dTu\\/Lh6XANi0aDeExhZjHyuBAgHVfIzxSUC2AYMz+u8+KFZ2Db9s=\"\r\n    },\r\n    \"bid\": \"com.gamania.galaxytest\",\r\n    \"bvrs\": \"1\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Refund/callback/541",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Refund", "callback", "541"]
                }
            },
            "response": []
        },
        {
            "name": "Refund/callback/541 apple multiple refund",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"notification_type\": \"REFUND\",\r\n  \"password\": \"c255cbbb3f9f49cf8d6220d270ea5128\",\r\n  \"environment\": \"Sandbox\",\r\n  \"unified_receipt\": {\r\n    \"status\": 0,\r\n    \"environment\": \"Sandbox\",\r\n    \"latest_receipt_info\": [\r\n      {\r\n        \"quantity\": \"1\",\r\n        \"product_id\": \"com.gamania.galaxytest.t003\",\r\n        \"transaction_id\": \"200000037000780713\",\r\n        \"purchase_date\": \"2023-08-25 02:21:19 Etc/GMT\",\r\n        \"purchase_date_ms\": \"1692930079000\",\r\n        \"purchase_date_pst\": \"2023-08-24 19:21:19 America/Los_Angeles\",\r\n        \"original_purchase_date\": \"2023-08-25 02:21:19 Etc/GMT\",\r\n        \"original_purchase_date_ms\": \"1692930079000\",\r\n        \"original_purchase_date_pst\": \"2023-08-24 19:21:19 America/Los_Angeles\",\r\n        \"is_trial_period\": \"false\",\r\n        \"original_transaction_id\": \"200000037000780713\",\r\n        \"cancellation_date\": \"2023-08-28 04:14:55 Etc/GMT\",\r\n        \"cancellation_date_ms\": \"1693196095000\",\r\n        \"cancellation_date_pst\": \"2023-08-27 21:14:55 America/Los_Angeles\",\r\n        \"cancellation_reason\": \"0\",\r\n        \"in_app_ownership_type\": \"PURCHASED\"\r\n      },\r\n      {\r\n        \"quantity\": \"1\",\r\n        \"product_id\": \"com.gamania.galaxytest.t002\",\r\n        \"transaction_id\": \"2000000397487557\",\r\n        \"purchase_date\": \"2023-08-24 09:43:06 Etc/GMT\",\r\n        \"purchase_date_ms\": \"1692870186000\",\r\n        \"purchase_date_pst\": \"2023-08-24 02:43:06 America/Los_Angeles\",\r\n        \"original_purchase_date\": \"2023-08-24 09:43:06 Etc/GMT\",\r\n        \"original_purchase_date_ms\": \"1692870186000\",\r\n        \"original_purchase_date_pst\": \"2023-08-24 02:43:06 America/Los_Angeles\",\r\n        \"is_trial_period\": \"false\",\r\n        \"original_transaction_id\": \"2000000397487557\",\r\n        \"cancellation_date\": \"2023-08-24 10:45:44 Etc/GMT\",\r\n        \"cancellation_date_ms\": \"1692873944000\",\r\n        \"cancellation_date_pst\": \"2023-08-24 03:45:44 America/Los_Angeles\",\r\n        \"cancellation_reason\": \"0\",\r\n        \"in_app_ownership_type\": \"PURCHASED\"\r\n      },\r\n      {\r\n        \"quantity\": \"1\",\r\n        \"product_id\": \"com.gamania.galaxytest.t003\",\r\n        \"transaction_id\": \"2000000396347199\",\r\n        \"purchase_date\": \"2023-08-23 07:15:43 Etc/GMT\",\r\n        \"purchase_date_ms\": \"1692774943000\",\r\n        \"purchase_date_pst\": \"2023-08-23 00:15:43 America/Los_Angeles\",\r\n        \"original_purchase_date\": \"2023-08-23 07:15:43 Etc/GMT\",\r\n        \"original_purchase_date_ms\": \"1692774943000\",\r\n        \"original_purchase_date_pst\": \"2023-08-23 00:15:43 America/Los_Angeles\",\r\n        \"is_trial_period\": \"false\",\r\n        \"original_transaction_id\": \"2000000396347199\",\r\n        \"cancellation_date\": \"2023-08-23 09:15:30 Etc/GMT\",\r\n        \"cancellation_date_ms\": \"1692782130000\",\r\n        \"cancellation_date_pst\": \"2023-08-23 02:15:30 America/Los_Angeles\",\r\n        \"cancellation_reason\": \"1\",\r\n        \"in_app_ownership_type\": \"PURCHASED\"\r\n      },\r\n      {\r\n        \"quantity\": \"1\",\r\n        \"product_id\": \"com.gamania.galaxytest.t002\",\r\n        \"transaction_id\": \"2000000395211098\",\r\n        \"purchase_date\": \"2023-08-22 03:59:11 Etc/GMT\",\r\n        \"purchase_date_ms\": \"1692676751000\",\r\n        \"purchase_date_pst\": \"2023-08-21 20:59:11 America/Los_Angeles\",\r\n        \"original_purchase_date\": \"2023-08-22 03:59:11 Etc/GMT\",\r\n        \"original_purchase_date_ms\": \"1692676751000\",\r\n        \"original_purchase_date_pst\": \"2023-08-21 20:59:11 America/Los_Angeles\",\r\n        \"is_trial_period\": \"false\",\r\n        \"original_transaction_id\": \"2000000395211098\",\r\n        \"cancellation_date\": \"2023-08-22 05:01:40 Etc/GMT\",\r\n        \"cancellation_date_ms\": \"1692680500000\",\r\n        \"cancellation_date_pst\": \"2023-08-21 22:01:40 America/Los_Angeles\",\r\n        \"cancellation_reason\": \"0\",\r\n        \"in_app_ownership_type\": \"PURCHASED\"\r\n      },\r\n      {\r\n        \"quantity\": \"1\",\r\n        \"product_id\": \"com.gamania.galaxytest.t002\",\r\n        \"transaction_id\": \"2000000395196995\",\r\n        \"purchase_date\": \"2023-08-22 03:29:11 Etc/GMT\",\r\n        \"purchase_date_ms\": \"1692674951000\",\r\n        \"purchase_date_pst\": \"2023-08-21 20:29:11 America/Los_Angeles\",\r\n        \"original_purchase_date\": \"2023-08-22 03:29:11 Etc/GMT\",\r\n        \"original_purchase_date_ms\": \"1692674951000\",\r\n        \"original_purchase_date_pst\": \"2023-08-21 20:29:11 America/Los_Angeles\",\r\n        \"is_trial_period\": \"false\",\r\n        \"original_transaction_id\": \"2000000395196995\",\r\n        \"cancellation_date\": \"2023-08-22 04:32:41 Etc/GMT\",\r\n        \"cancellation_date_ms\": \"1692678761000\",\r\n        \"cancellation_date_pst\": \"2023-08-21 21:32:41 America/Los_Angeles\",\r\n        \"cancellation_reason\": \"0\",\r\n        \"in_app_ownership_type\": \"PURCHASED\"\r\n      },\r\n      {\r\n        \"quantity\": \"1\",\r\n        \"product_id\": \"com.gamania.galaxytest.t002\",\r\n        \"transaction_id\": \"2000000344016973\",\r\n        \"purchase_date\": \"2023-06-05 08:32:57 Etc/GMT\",\r\n        \"purchase_date_ms\": \"1685953977000\",\r\n        \"purchase_date_pst\": \"2023-06-05 01:32:57 America/Los_Angeles\",\r\n        \"original_purchase_date\": \"2023-06-05 08:32:57 Etc/GMT\",\r\n        \"original_purchase_date_ms\": \"1685953977000\",\r\n        \"original_purchase_date_pst\": \"2023-06-05 01:32:57 America/Los_Angeles\",\r\n        \"is_trial_period\": \"false\",\r\n        \"original_transaction_id\": \"2000000344016973\",\r\n        \"cancellation_date\": \"2023-06-05 09:35:51 Etc/GMT\",\r\n        \"cancellation_date_ms\": \"1685957751000\",\r\n        \"cancellation_date_pst\": \"2023-06-05 02:35:51 America/Los_Angeles\",\r\n        \"cancellation_reason\": \"1\",\r\n        \"in_app_ownership_type\": \"PURCHASED\"\r\n      },\r\n      {\r\n        \"quantity\": \"1\",\r\n        \"product_id\": \"com.gamania.galaxytest.t002\",\r\n        \"transaction_id\": \"2000000342705570\",\r\n        \"purchase_date\": \"2023-06-02 03:05:57 Etc/GMT\",\r\n        \"purchase_date_ms\": \"1685675157000\",\r\n        \"purchase_date_pst\": \"2023-06-01 20:05:57 America/Los_Angeles\",\r\n        \"original_purchase_date\": \"2023-06-02 03:05:57 Etc/GMT\",\r\n        \"original_purchase_date_ms\": \"1685675157000\",\r\n        \"original_purchase_date_pst\": \"2023-06-01 20:05:57 America/Los_Angeles\",\r\n        \"is_trial_period\": \"false\",\r\n        \"original_transaction_id\": \"2000000342705570\",\r\n        \"cancellation_date\": \"2023-06-02 04:08:13 Etc/GMT\",\r\n        \"cancellation_date_ms\": \"1685678893000\",\r\n        \"cancellation_date_pst\": \"2023-06-01 21:08:13 America/Los_Angeles\",\r\n        \"cancellation_reason\": \"0\",\r\n        \"in_app_ownership_type\": \"PURCHASED\"\r\n      },\r\n      {\r\n        \"quantity\": \"1\",\r\n        \"product_id\": \"com.gamania.galaxytest.t003\",\r\n        \"transaction_id\": \"2000000341003759\",\r\n        \"purchase_date\": \"2023-05-31 02:40:44 Etc/GMT\",\r\n        \"purchase_date_ms\": \"1685500844000\",\r\n        \"purchase_date_pst\": \"2023-05-30 19:40:44 America/Los_Angeles\",\r\n        \"original_purchase_date\": \"2023-05-31 02:40:44 Etc/GMT\",\r\n        \"original_purchase_date_ms\": \"1685500844000\",\r\n        \"original_purchase_date_pst\": \"2023-05-30 19:40:44 America/Los_Angeles\",\r\n        \"is_trial_period\": \"false\",\r\n        \"original_transaction_id\": \"2000000341003759\",\r\n        \"cancellation_date\": \"2023-05-31 10:16:40 Etc/GMT\",\r\n        \"cancellation_date_ms\": \"1685528200000\",\r\n        \"cancellation_date_pst\": \"2023-05-31 03:16:40 America/Los_Angeles\",\r\n        \"cancellation_reason\": \"0\",\r\n        \"in_app_ownership_type\": \"PURCHASED\"\r\n      },\r\n      {\r\n        \"quantity\": \"1\",\r\n        \"product_id\": \"com.gamania.galaxyNonRenewabletest.t001\",\r\n        \"transaction_id\": \"2000000337857799\",\r\n        \"purchase_date\": \"2023-05-25 09:31:18 Etc/GMT\",\r\n        \"purchase_date_ms\": \"1685007078000\",\r\n        \"purchase_date_pst\": \"2023-05-25 02:31:18 America/Los_Angeles\",\r\n        \"original_purchase_date\": \"2023-05-25 09:31:18 Etc/GMT\",\r\n        \"original_purchase_date_ms\": \"1685007078000\",\r\n        \"original_purchase_date_pst\": \"2023-05-25 02:31:18 America/Los_Angeles\",\r\n        \"is_trial_period\": \"false\",\r\n        \"original_transaction_id\": \"2000000337857799\",\r\n        \"in_app_ownership_type\": \"PURCHASED\"\r\n      },\r\n      {\r\n        \"quantity\": \"1\",\r\n        \"product_id\": \"com.gamania.galaxytest.t003\",\r\n        \"transaction_id\": \"2000000319541054\",\r\n        \"purchase_date\": \"2023-04-25 10:08:22 Etc/GMT\",\r\n        \"purchase_date_ms\": \"1682417302000\",\r\n        \"purchase_date_pst\": \"2023-04-25 03:08:22 America/Los_Angeles\",\r\n        \"original_purchase_date\": \"2023-04-25 10:08:22 Etc/GMT\",\r\n        \"original_purchase_date_ms\": \"1682417302000\",\r\n        \"original_purchase_date_pst\": \"2023-04-25 03:08:22 America/Los_Angeles\",\r\n        \"is_trial_period\": \"false\",\r\n        \"original_transaction_id\": \"2000000319541054\",\r\n        \"cancellation_date\": \"2023-05-31 03:44:15 Etc/GMT\",\r\n        \"cancellation_date_ms\": \"1685504655000\",\r\n        \"cancellation_date_pst\": \"2023-05-30 20:44:15 America/Los_Angeles\",\r\n        \"cancellation_reason\": \"0\",\r\n        \"in_app_ownership_type\": \"PURCHASED\"\r\n      }\r\n    ],\r\n    \"latest_receipt\": \"MIIUSAYJKoZIhvcNAQcCoIIUOTCCFDUCAQExDzANBglghkgBZQMEAgEFADCCA34GCSqGSIb3DQEHAaCCA28EggNrMYIDZzAKAgEIAgEBBAIWADAKAgEUAgEBBAIMADALAgEBAgEBBAMCAQAwCwIBCwIBAQQDAgEAMAsCAQ8CAQEEAwIBADALAgEQAgEBBAMCAQAwCwIBGQIBAQQDAgEDMAwCAQoCAQEEBBYCNCswDAIBDgIBAQQEAgIBGjANAgENAgEBBAUCAwJxZDANAgETAgEBBAUMAzEuMDAOAgEDAgEBBAYMBG51bGwwDgIBCQIBAQQGAgRQMzAxMBgCAQQCAQIEEJG88i/vyJxTu7QR7FMxd7swGwIBAAIBAQQTDBFQcm9kdWN0aW9uU2FuZGJveDAcAgEFAgEBBBQeQEzWtlb2n60JXdB490hrALeVejAeAgEMAgEBBBYWFDIwMjMtMDgtMjhUMDQ6MzA6MTBaMB4CARICAQEEFhYUMjAxMy0wOC0wMVQwNzowMDowMFowIAIBAgIBAQQYDBZjb20uZ2FtYW5pYS5nYWxheHl0ZXN0MDYCAQcCAQEELn1Elu06DMQQJVtXEc45vHw+9i8eA4DgjerJ+UeBOnZFJf3fYYzbkYXEYkbxnH0wRQIBBgIBAQQ99A2WAZM98wQwsb+/KAlshIJGw4fvnz1/9ZkSqe23lqIp/ZwW2OT0YiTRdlt6u/z4eDPtn3WFpjsc8WF2AjCCAXoCARECAQEEggFwMYIBbDALAgIGrAIBAQQCFgAwCwICBq0CAQEEAgwAMAsCAgawAgEBBAIWADALAgIGsgIBAQQCDAAwCwICBrMCAQEEAgwAMAsCAga0AgEBBAIMADALAgIGtQIBAQQCDAAwCwICBrYCAQEEAgwAMAwCAgalAgEBBAMCAQEwDAICBqsCAQEEAwIBAjAMAgIGrgIBAQQDAgEAMAwCAgavAgEBBAMCAQAwDAICBrECAQEEAwIBADAMAgIGugIBAQQDAgEAMBsCAganAgEBBBIMEDIwMDAwMDAzMzc4NTc3OTkwGwICBqkCAQEEEgwQMjAwMDAwMDMzNzg1Nzc5OTAfAgIGqAIBAQQWFhQyMDIzLTA1LTI1VDA5OjMxOjE4WjAfAgIGqgIBAQQWFhQyMDIzLTA1LTI1VDA5OjMxOjE4WjAyAgIGpgIBAQQpDCdjb20uZ2FtYW5pYS5nYWxheHlOb25SZW5ld2FibGV0ZXN0LnQwMDGggg7iMIIFxjCCBK6gAwIBAgIQFeefzlJVCmUBfJHf5O6zWTANBgkqhkiG9w0BAQsFADB1MUQwQgYDVQQDDDtBcHBsZSBXb3JsZHdpZGUgRGV2ZWxvcGVyIFJlbGF0aW9ucyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTELMAkGA1UECwwCRzUxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMB4XDTIyMDkwMjE5MTM1N1oXDTI0MTAwMTE5MTM1NlowgYkxNzA1BgNVBAMMLk1hYyBBcHAgU3RvcmUgYW5kIGlUdW5lcyBTdG9yZSBSZWNlaXB0IFNpZ25pbmcxLDAqBgNVBAsMI0FwcGxlIFdvcmxkd2lkZSBEZXZlbG9wZXIgUmVsYXRpb25zMRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALxEzgutajB2r8AJDDR6GWHvvSAN9fpDnhP1rPM8kw7XZZt0wlo3J1Twjs1GOoLMdb8S4Asp7lhroOdCKveHAJ+izKki5m3oDefLD/TQZFuzv41jzcKbYrAp197Ao42tG6T462jbc4YuX8y7IX1ruDhuq+8ig0gT9kSipEac5WLsdDt/N5SidmqIIXsEfKHTs57iNW2njo+w42XWyDMfTo6KA+zpvcwftaeGjgTwkO+6IY5tkmJywYnQmP7jVclWxjR0/vQemkNwYX1+hsJ53VB13Qiw5Ki1ejZ9l/z5SSAd5xJiqGXaPBZY/iZRj5F5qz1bu/ku0ztSBxgw538PmO8CAwEAAaOCAjswggI3MAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUGYuXjUpbYXhX9KVcNRKKOQjjsHUwcAYIKwYBBQUHAQEEZDBiMC0GCCsGAQUFBzAChiFodHRwOi8vY2VydHMuYXBwbGUuY29tL3d3ZHJnNS5kZXIwMQYIKwYBBQUHMAGGJWh0dHA6Ly9vY3NwLmFwcGxlLmNvbS9vY3NwMDMtd3dkcmc1MDUwggEfBgNVHSAEggEWMIIBEjCCAQ4GCiqGSIb3Y2QFBgEwgf8wNwYIKwYBBQUHAgEWK2h0dHBzOi8vd3d3LmFwcGxlLmNvbS9jZXJ0aWZpY2F0ZWF1dGhvcml0eS8wgcMGCCsGAQUFBwICMIG2DIGzUmVsaWFuY2Ugb24gdGhpcyBjZXJ0aWZpY2F0ZSBieSBhbnkgcGFydHkgYXNzdW1lcyBhY2NlcHRhbmNlIG9mIHRoZSB0aGVuIGFwcGxpY2FibGUgc3RhbmRhcmQgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdXNlLCBjZXJ0aWZpY2F0ZSBwb2xpY3kgYW5kIGNlcnRpZmljYXRpb24gcHJhY3RpY2Ugc3RhdGVtZW50cy4wMAYDVR0fBCkwJzAloCOgIYYfaHR0cDovL2NybC5hcHBsZS5jb20vd3dkcmc1LmNybDAdBgNVHQ4EFgQUIsk8e2MThb46O8UzqbT6sbCCkxcwDgYDVR0PAQH/BAQDAgeAMBAGCiqGSIb3Y2QGCwEEAgUAMA0GCSqGSIb3DQEBCwUAA4IBAQA8Ru7PqDy4/Z6Dy1Hw9qhR/OIHHYIk3O6SihvqTajqO0+HMpo5Odtb+FvaTY3N+wlKC7HNmhlvTsf9aFs73PlXj5MkSoR0jaAkZ3c5gjkNjy98gYEP7etb+HW0/PPelJG9TIUcfdGOZ2RIggYKsGEkxPBQK1Zars1uwHeAYc8I8qBR5XP5AZETZzL/M3EzOzBPSzAFfC2zOWvfJl2vfLl2BrmuCx9lUFUBzaGzTzlxBDHGSHUVJj9K3yrkgsqOGGXpYLCOhuLWStRzmSStThVObUVIa8YDu3c0Rp1H16Ro9w90QEI3eIQovgIrCg6M3lZJmlDNAnk7jNA6qK+ZHMqBMIIEVTCCAz2gAwIBAgIUO36ACu7TAqHm7NuX2cqsKJzxaZQwDQYJKoZIhvcNAQELBQAwYjELMAkGA1UEBhMCVVMxEzARBgNVBAoTCkFwcGxlIEluYy4xJjAkBgNVBAsTHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRYwFAYDVQQDEw1BcHBsZSBSb290IENBMB4XDTIwMTIxNjE5Mzg1NloXDTMwMTIxMDAwMDAwMFowdTFEMEIGA1UEAww7QXBwbGUgV29ybGR3aWRlIERldmVsb3BlciBSZWxhdGlvbnMgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxCzAJBgNVBAsMAkc1MRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJ9d2h/7+rzQSyI8x9Ym+hf39J8ePmQRZprvXr6rNL2qLCFu1h6UIYUsdMEOEGGqPGNKfkrjyHXWz8KcCEh7arkpsclm/ciKFtGyBDyCuoBs4v8Kcuus/jtvSL6eixFNlX2ye5AvAhxO/Em+12+1T754xtress3J2WYRO1rpCUVziVDUTuJoBX7adZxLAa7a489tdE3eU9DVGjiCOtCd410pe7GB6iknC/tgfIYS+/BiTwbnTNEf2W2e7XPaeCENnXDZRleQX2eEwXN3CqhiYraucIa7dSOJrXn25qTU/YMmMgo7JJJbIKGc0S+AGJvdPAvntf3sgFcPF54/K4cnu/cCAwEAAaOB7zCB7DASBgNVHRMBAf8ECDAGAQH/AgEAMB8GA1UdIwQYMBaAFCvQaUeUdgn+9GuNLkCm90dNfwheMEQGCCsGAQUFBwEBBDgwNjA0BggrBgEFBQcwAYYoaHR0cDovL29jc3AuYXBwbGUuY29tL29jc3AwMy1hcHBsZXJvb3RjYTAuBgNVHR8EJzAlMCOgIaAfhh1odHRwOi8vY3JsLmFwcGxlLmNvbS9yb290LmNybDAdBgNVHQ4EFgQUGYuXjUpbYXhX9KVcNRKKOQjjsHUwDgYDVR0PAQH/BAQDAgEGMBAGCiqGSIb3Y2QGAgEEAgUAMA0GCSqGSIb3DQEBCwUAA4IBAQBaxDWi2eYKnlKiAIIid81yL5D5Iq8UJcyqCkJgksK9dR3rTMoV5X5rQBBe+1tFdA3wen2Ikc7eY4tCidIY30GzWJ4GCIdI3UCvI9Xt6yxg5eukfxzpnIPWlF9MYjmKTq4TjX1DuNxerL4YQPLmDyxdE5Pxe2WowmhI3v+0lpsM+zI2np4NlV84CouW0hJst4sLjtc+7G8Bqs5NRWDbhHFmYuUZZTDNiv9FU/tu+4h3Q8NIY/n3UbNyXnniVs+8u4S5OFp4rhFIUrsNNYuU3sx0mmj1SWCUrPKosxWGkNDMMEOG0+VwAlG0gcCol9Tq6rCMCUDvOJOyzSID62dDZchFMIIEuzCCA6OgAwIBAgIBAjANBgkqhkiG9w0BAQUFADBiMQswCQYDVQQGEwJVUzETMBEGA1UEChMKQXBwbGUgSW5jLjEmMCQGA1UECxMdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxFjAUBgNVBAMTDUFwcGxlIFJvb3QgQ0EwHhcNMDYwNDI1MjE0MDM2WhcNMzUwMjA5MjE0MDM2WjBiMQswCQYDVQQGEwJVUzETMBEGA1UEChMKQXBwbGUgSW5jLjEmMCQGA1UECxMdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxFjAUBgNVBAMTDUFwcGxlIFJvb3QgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDkkakJH5HbHkdQ6wXtXnmELes2oldMVeyLGYne+Uts9QerIjAC6Bg++FAJ039BqJj50cpmnCRrEdCju+QbKsMflZ56DKRHi1vUFjczy8QPTc4UadHJGXL1XQ7Vf1+b8iUDulWPTV0N8WQ1IxVLFVkds5T39pyez1C6wVhQZ48ItCD3y6wsIG9wtj8BMIy3Q88PnT3zK0koGsj+zrW5DtleHNbLPbU6rfQPDgCSC7EhFi501TwN22IWq6NxkkdTVcGvL0Gz+PvjcM3mo0xFfh9Ma1CWQYnEdGILEINBhzOKgbEwWOxaBDKMaLOPHd5lc/9nXmW8Sdh2nzMUZaF3lMktAgMBAAGjggF6MIIBdjAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUK9BpR5R2Cf70a40uQKb3R01/CF4wHwYDVR0jBBgwFoAUK9BpR5R2Cf70a40uQKb3R01/CF4wggERBgNVHSAEggEIMIIBBDCCAQAGCSqGSIb3Y2QFATCB8jAqBggrBgEFBQcCARYeaHR0cHM6Ly93d3cuYXBwbGUuY29tL2FwcGxlY2EvMIHDBggrBgEFBQcCAjCBthqBs1JlbGlhbmNlIG9uIHRoaXMgY2VydGlmaWNhdGUgYnkgYW55IHBhcnR5IGFzc3VtZXMgYWNjZXB0YW5jZSBvZiB0aGUgdGhlbiBhcHBsaWNhYmxlIHN0YW5kYXJkIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHVzZSwgY2VydGlmaWNhdGUgcG9saWN5IGFuZCBjZXJ0aWZpY2F0aW9uIHByYWN0aWNlIHN0YXRlbWVudHMuMA0GCSqGSIb3DQEBBQUAA4IBAQBcNplMLXi37Yyb3PN3m/J20ncwT8EfhYOFG5k9RzfyqZtAjizUsZAS2L70c5vu0mQPy3lPNNiiPvl4/2vIB+x9OYOLUyDTOMSxv5pPCmv/K/xZpwUJfBdAVhEedNO3iyM7R6PVbyTi69G3cN8PReEnyvFteO3ntRcXqNx+IjXKJdXZD9Zr1KIkIxH3oayPc4FgxhtbCS+SsvhESPBgOJ4V9T0mZyCKM2r3DYLP3uujL/lTaltkwGMzd/c6ByxW69oPIQ7aunMZT7XZNn/Bh1XZp5m5MkL72NVxnn6hUrcbvZNCJBIqxw8dtk2cXmPIS4AXUKqK1drk/NAJBzewdXUhMYIBtTCCAbECAQEwgYkwdTFEMEIGA1UEAww7QXBwbGUgV29ybGR3aWRlIERldmVsb3BlciBSZWxhdGlvbnMgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxCzAJBgNVBAsMAkc1MRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUwIQFeefzlJVCmUBfJHf5O6zWTANBglghkgBZQMEAgEFADANBgkqhkiG9w0BAQEFAASCAQCAmiRJ62Jua38mfSrEyR7uSkmArsjfnPuPeTvyZuXQPyG0xvFvMkzaXS6NAa3rZ212yQ57EsD/eaJABQBqcPEhXsRlMUOQX/TwTzMDFgmWrmULOPTIcAPUE26qv5X8/8IB8hKveOY7wizCdFKQUEqPI3CbK6CVQkkDmSgH2d6mnaWfMxq1Pd38vPAHnD9+hKcTFIRL5e3NIKhOmz+rQeJlG9RVk/F974eb05x35VnaUw7AdOlexOi4dr5T11SzqqsPo2+dva4Dh2EU3jMlEg2spYMC2chuoBU+kvRloZP7oEh9nr0/3MtOx3Vd6RcfJPWMGiWlYCZasGP8uxgU3k9F\"\r\n  },\r\n  \"bid\": \"com.gamania.galaxytest\",\r\n  \"bvrs\": \"1\",\r\n  \"original_transaction_id\": 2000000398157943,\r\n  \"deprecation\": \"Mon, 5 Jun 2023 23:59:59 GMT\",\r\n  \"apiName\": \"webapirc/AppStore/callback/541\",\r\n  \"ipAddress\": \"192.168.77.153\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Refund/callback/541",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Refund", "callback", "541"]
                }
            },
            "response": []
        },
        {
            "name": "Refund/callback/541 apple加密jwt",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\"signedPayload\":\"eyJhbGciOiJFUzI1NiIsIng1YyI6WyJNSUlFTURDQ0E3YWdBd0lCQWdJUWFQb1BsZHZwU29FSDBsQnJqRFB2OWpBS0JnZ3Foa2pPUFFRREF6QjFNVVF3UWdZRFZRUURERHRCY0hCc1pTQlhiM0pzWkhkcFpHVWdSR1YyWld4dmNHVnlJRkpsYkdGMGFXOXVjeUJEWlhKMGFXWnBZMkYwYVc5dUlFRjFkR2h2Y21sMGVURUxNQWtHQTFVRUN3d0NSell4RXpBUkJnTlZCQW9NQ2tGd2NHeGxJRWx1WXk0eEN6QUpCZ05WQkFZVEFsVlRNQjRYRFRJeE1EZ3lOVEF5TlRBek5Gb1hEVEl6TURreU5EQXlOVEF6TTFvd2daSXhRREErQmdOVkJBTU1OMUJ5YjJRZ1JVTkRJRTFoWXlCQmNIQWdVM1J2Y21VZ1lXNWtJR2xVZFc1bGN5QlRkRzl5WlNCU1pXTmxhWEIwSUZOcFoyNXBibWN4TERBcUJnTlZCQXNNSTBGd2NHeGxJRmR2Y214a2QybGtaU0JFWlhabGJHOXdaWElnVW1Wc1lYUnBiMjV6TVJNd0VRWURWUVFLREFwQmNIQnNaU0JKYm1NdU1Rc3dDUVlEVlFRR0V3SlZVekJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCT29UY2FQY3BlaXBOTDllUTA2dEN1N3BVY3dkQ1hkTjh2R3FhVWpkNThaOHRMeGlVQzBkQmVBK2V1TVlnZ2gxLzVpQWsrRk14VUZtQTJhMXI0YUNaOFNqZ2dJSU1JSUNCREFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGRDh2bENOUjAxREptaWc5N2JCODVjK2xrR0taTUhBR0NDc0dBUVVGQndFQkJHUXdZakF0QmdnckJnRUZCUWN3QW9ZaGFIUjBjRG92TDJObGNuUnpMbUZ3Y0d4bExtTnZiUzkzZDJSeVp6WXVaR1Z5TURFR0NDc0dBUVVGQnpBQmhpVm9kSFJ3T2k4dmIyTnpjQzVoY0hCc1pTNWpiMjB2YjJOemNEQXpMWGQzWkhKbk5qQXlNSUlCSGdZRFZSMGdCSUlCRlRDQ0FSRXdnZ0VOQmdvcWhraUc5Mk5rQlFZQk1JSCtNSUhEQmdnckJnRUZCUWNDQWpDQnRneUJzMUpsYkdsaGJtTmxJRzl1SUhSb2FYTWdZMlZ5ZEdsbWFXTmhkR1VnWW5rZ1lXNTVJSEJoY25SNUlHRnpjM1Z0WlhNZ1lXTmpaWEIwWVc1alpTQnZaaUIwYUdVZ2RHaGxiaUJoY0hCc2FXTmhZbXhsSUhOMFlXNWtZWEprSUhSbGNtMXpJR0Z1WkNCamIyNWthWFJwYjI1eklHOW1JSFZ6WlN3Z1kyVnlkR2xtYVdOaGRHVWdjRzlzYVdONUlHRnVaQ0JqWlhKMGFXWnBZMkYwYVc5dUlIQnlZV04wYVdObElITjBZWFJsYldWdWRITXVNRFlHQ0NzR0FRVUZCd0lCRmlwb2RIUndPaTh2ZDNkM0xtRndjR3hsTG1OdmJTOWpaWEowYVdacFkyRjBaV0YxZEdodmNtbDBlUzh3SFFZRFZSME9CQllFRkNPQ21NQnEvLzFMNWltdlZtcVgxb0NZZXFyTU1BNEdBMVVkRHdFQi93UUVBd0lIZ0RBUUJnb3Foa2lHOTJOa0Jnc0JCQUlGQURBS0JnZ3Foa2pPUFFRREF3Tm9BREJsQWpFQWw0SkI5R0pIaXhQMm51aWJ5VTFrM3dyaTVwc0dJeFBNRTA1c0ZLcTdoUXV6dmJleUJ1ODJGb3p6eG1ienBvZ29BakJMU0ZsMGRaV0lZbDJlalBWK0RpNWZCbktQdThteW1CUXRvRS9IMmJFUzBxQXM4Yk51ZVUzQ0JqamgxbHduRHNJPSIsIk1JSURGakNDQXB5Z0F3SUJBZ0lVSXNHaFJ3cDBjMm52VTRZU3ljYWZQVGp6Yk5jd0NnWUlLb1pJemowRUF3TXdaekViTUJrR0ExVUVBd3dTUVhCd2JHVWdVbTl2ZENCRFFTQXRJRWN6TVNZd0pBWURWUVFMREIxQmNIQnNaU0JEWlhKMGFXWnBZMkYwYVc5dUlFRjFkR2h2Y21sMGVURVRNQkVHQTFVRUNnd0tRWEJ3YkdVZ1NXNWpMakVMTUFrR0ExVUVCaE1DVlZNd0hoY05NakV3TXpFM01qQXpOekV3V2hjTk16WXdNekU1TURBd01EQXdXakIxTVVRd1FnWURWUVFERER0QmNIQnNaU0JYYjNKc1pIZHBaR1VnUkdWMlpXeHZjR1Z5SUZKbGJHRjBhVzl1Y3lCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlVEVMTUFrR0ExVUVDd3dDUnpZeEV6QVJCZ05WQkFvTUNrRndjR3hsSUVsdVl5NHhDekFKQmdOVkJBWVRBbFZUTUhZd0VBWUhLb1pJemowQ0FRWUZLNEVFQUNJRFlnQUVic1FLQzk0UHJsV21aWG5YZ3R4emRWSkw4VDBTR1luZ0RSR3BuZ24zTjZQVDhKTUViN0ZEaTRiQm1QaENuWjMvc3E2UEYvY0djS1hXc0w1dk90ZVJoeUo0NXgzQVNQN2NPQithYW85MGZjcHhTdi9FWkZibmlBYk5nWkdoSWhwSW80SDZNSUgzTUJJR0ExVWRFd0VCL3dRSU1BWUJBZjhDQVFBd0h3WURWUjBqQkJnd0ZvQVV1N0Rlb1ZnemlKcWtpcG5ldnIzcnI5ckxKS3N3UmdZSUt3WUJCUVVIQVFFRU9qQTRNRFlHQ0NzR0FRVUZCekFCaGlwb2RIUndPaTh2YjJOemNDNWhjSEJzWlM1amIyMHZiMk56Y0RBekxXRndjR3hsY205dmRHTmhaek13TndZRFZSMGZCREF3TGpBc29DcWdLSVltYUhSMGNEb3ZMMk55YkM1aGNIQnNaUzVqYjIwdllYQndiR1Z5YjI5MFkyRm5NeTVqY213d0hRWURWUjBPQkJZRUZEOHZsQ05SMDFESm1pZzk3YkI4NWMrbGtHS1pNQTRHQTFVZER3RUIvd1FFQXdJQkJqQVFCZ29xaGtpRzkyTmtCZ0lCQkFJRkFEQUtCZ2dxaGtqT1BRUURBd05vQURCbEFqQkFYaFNxNUl5S29nTUNQdHc0OTBCYUI2NzdDYUVHSlh1ZlFCL0VxWkdkNkNTamlDdE9udU1UYlhWWG14eGN4ZmtDTVFEVFNQeGFyWlh2TnJreFUzVGtVTUkzM3l6dkZWVlJUNHd4V0pDOTk0T3NkY1o0K1JHTnNZRHlSNWdtZHIwbkRHZz0iLCJNSUlDUXpDQ0FjbWdBd0lCQWdJSUxjWDhpTkxGUzVVd0NnWUlLb1pJemowRUF3TXdaekViTUJrR0ExVUVBd3dTUVhCd2JHVWdVbTl2ZENCRFFTQXRJRWN6TVNZd0pBWURWUVFMREIxQmNIQnNaU0JEWlhKMGFXWnBZMkYwYVc5dUlFRjFkR2h2Y21sMGVURVRNQkVHQTFVRUNnd0tRWEJ3YkdVZ1NXNWpMakVMTUFrR0ExVUVCaE1DVlZNd0hoY05NVFF3TkRNd01UZ3hPVEEyV2hjTk16a3dORE13TVRneE9UQTJXakJuTVJzd0dRWURWUVFEREJKQmNIQnNaU0JTYjI5MElFTkJJQzBnUnpNeEpqQWtCZ05WQkFzTUhVRndjR3hsSUVObGNuUnBabWxqWVhScGIyNGdRWFYwYUc5eWFYUjVNUk13RVFZRFZRUUtEQXBCY0hCc1pTQkpibU11TVFzd0NRWURWUVFHRXdKVlV6QjJNQkFHQnlxR1NNNDlBZ0VHQlN1QkJBQWlBMklBQkpqcEx6MUFjcVR0a3lKeWdSTWMzUkNWOGNXalRuSGNGQmJaRHVXbUJTcDNaSHRmVGpqVHV4eEV0WC8xSDdZeVlsM0o2WVJiVHpCUEVWb0EvVmhZREtYMUR5eE5CMGNUZGRxWGw1ZHZNVnp0SzUxN0lEdll1VlRaWHBta09sRUtNYU5DTUVBd0hRWURWUjBPQkJZRUZMdXczcUZZTTRpYXBJcVozcjY5NjYvYXl5U3JNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEZ1lEVlIwUEFRSC9CQVFEQWdFR01Bb0dDQ3FHU000OUJBTURBMmdBTUdVQ01RQ0Q2Y0hFRmw0YVhUUVkyZTN2OUd3T0FFWkx1Tit5UmhIRkQvM21lb3locG12T3dnUFVuUFdUeG5TNGF0K3FJeFVDTUcxbWloREsxQTNVVDgyTlF6NjBpbU9sTTI3amJkb1h0MlFmeUZNbStZaGlkRGtMRjF2TFVhZ002QmdENTZLeUtBPT0iXX0.eyJub3RpZmljYXRpb25UeXBlIjoiUkVGVU5EX0RFQ0xJTkVEIiwibm90aWZpY2F0aW9uVVVJRCI6ImY1NWY1YTZiLTRlYjAtNDM5OS1iOGVjLTZlNmQ0YTE2ZTlhYyIsImRhdGEiOnsiYXBwQXBwbGVJZCI6MTY3MTc3MjgxMCwiYnVuZGxlSWQiOiJjb20uZ2FtYW5pYS5jaGliaW1hcnVrb2NoZWVyZnVsc3Bpcml0IiwiYnVuZGxlVmVyc2lvbiI6IjIxIiwiZW52aXJvbm1lbnQiOiJQcm9kdWN0aW9uIiwic2lnbmVkVHJhbnNhY3Rpb25JbmZvIjoiZXlKaGJHY2lPaUpGVXpJMU5pSXNJbmcxWXlJNld5Sk5TVWxGVFVSRFEwRTNZV2RCZDBsQ1FXZEpVV0ZRYjFCc1pIWndVMjlGU0RCc1FuSnFSRkIyT1dwQlMwSm5aM0ZvYTJwUFVGRlJSRUY2UWpGTlZWRjNVV2RaUkZaUlVVUkVSSFJDWTBoQ2MxcFRRbGhpTTBweldraGtjRnBIVldkU1IxWXlXbGQ0ZG1OSFZubEpSa3BzWWtkR01HRlhPWFZqZVVKRVdsaEtNR0ZYV25CWk1rWXdZVmM1ZFVsRlJqRmtSMmgyWTIxc01HVlVSVXhOUVd0SFFURlZSVU4zZDBOU2VsbDRSWHBCVWtKblRsWkNRVzlOUTJ0R2QyTkhlR3hKUld4MVdYazBlRU42UVVwQ1owNVdRa0ZaVkVGc1ZsUk5RalJZUkZSSmVFMUVaM2xPVkVGNVRsUkJlazVHYjFoRVZFbDZUVVJyZVU1RVFYbE9WRUY2VFRGdmQyZGFTWGhSUkVFclFtZE9Wa0pCVFUxT01VSjVZakpSWjFKVlRrUkpSVEZvV1hsQ1FtTklRV2RWTTFKMlkyMVZaMWxYTld0SlIyeFZaRmMxYkdONVFsUmtSemw1V2xOQ1UxcFhUbXhoV0VJd1NVWk9jRm95TlhCaWJXTjRURVJCY1VKblRsWkNRWE5OU1RCR2QyTkhlR3hKUm1SMlkyMTRhMlF5Ykd0YVUwSkZXbGhhYkdKSE9YZGFXRWxuVlcxV2MxbFlVbkJpTWpWNlRWSk5kMFZSV1VSV1VWRkxSRUZ3UW1OSVFuTmFVMEpLWW0xTmRVMVJjM2REVVZsRVZsRlJSMFYzU2xaVmVrSmFUVUpOUjBKNWNVZFRUVFE1UVdkRlIwTkRjVWRUVFRRNVFYZEZTRUV3U1VGQ1QyOVVZMkZRWTNCbGFYQk9URGxsVVRBMmRFTjFOM0JWWTNka1ExaGtUamgyUjNGaFZXcGtOVGhhT0hSTWVHbFZRekJrUW1WQksyVjFUVmxuWjJneEx6VnBRV3NyUmsxNFZVWnRRVEpoTVhJMFlVTmFPRk5xWjJkSlNVMUpTVU5DUkVGTlFtZE9Wa2hTVFVKQlpqaEZRV3BCUVUxQ09FZEJNVlZrU1hkUldVMUNZVUZHUkRoMmJFTk9VakF4UkVwdGFXYzVOMkpDT0RWaksyeHJSMHRhVFVoQlIwTkRjMGRCVVZWR1FuZEZRa0pIVVhkWmFrRjBRbWRuY2tKblJVWkNVV04zUVc5WmFHRklVakJqUkc5MlRESk9iR051VW5wTWJVWjNZMGQ0YkV4dFRuWmlVemt6WkRKU2VWcDZXWFZhUjFaNVRVUkZSME5EYzBkQlVWVkdRbnBCUW1ocFZtOWtTRkozVDJrNGRtSXlUbnBqUXpWb1kwaENjMXBUTldwaU1qQjJZakpPZW1ORVFYcE1XR1F6V2toS2JrNXFRWGxOU1VsQ1NHZFpSRlpTTUdkQ1NVbENSbFJEUTBGU1JYZG5aMFZPUW1kdmNXaHJhVWM1TWs1clFsRlpRazFKU0N0TlNVaEVRbWRuY2tKblJVWkNVV05EUVdwRFFuUm5lVUp6TVVwc1lrZHNhR0p0VG14SlJ6bDFTVWhTYjJGWVRXZFpNbFo1WkVkc2JXRlhUbWhrUjFWbldXNXJaMWxYTlRWSlNFSm9ZMjVTTlVsSFJucGpNMVowV2xoTloxbFhUbXBhV0VJd1dWYzFhbHBUUW5aYWFVSXdZVWRWWjJSSGFHeGlhVUpvWTBoQ2MyRlhUbWhaYlhoc1NVaE9NRmxYTld0WldFcHJTVWhTYkdOdE1YcEpSMFoxV2tOQ2FtSXlOV3RoV0ZKd1lqSTFla2xIT1cxSlNGWjZXbE4zWjFreVZubGtSMnh0WVZkT2FHUkhWV2RqUnpsellWZE9OVWxIUm5WYVEwSnFXbGhLTUdGWFduQlpNa1l3WVZjNWRVbElRbmxaVjA0d1lWZE9iRWxJVGpCWldGSnNZbGRXZFdSSVRYVk5SRmxIUTBOelIwRlJWVVpDZDBsQ1JtbHdiMlJJVW5kUGFUaDJaRE5rTTB4dFJuZGpSM2hzVEcxT2RtSlRPV3BhV0Vvd1lWZGFjRmt5UmpCYVYwWXhaRWRvZG1OdGJEQmxVemgzU0ZGWlJGWlNNRTlDUWxsRlJrTlBRMjFOUW5Fdkx6Rk1OV2x0ZGxadGNWZ3hiME5aWlhGeVRVMUJORWRCTVZWa1JIZEZRaTkzVVVWQmQwbElaMFJCVVVKbmIzRm9hMmxIT1RKT2EwSm5jMEpDUVVsR1FVUkJTMEpuWjNGb2EycFBVRkZSUkVGM1RtOUJSRUpzUVdwRlFXdzBTa0k1UjBwSWFYaFFNbTUxYVdKNVZURnJNM2R5YVRWd2MwZEplRkJOUlRBMWMwWkxjVGRvVVhWNmRtSmxlVUoxT0RKR2IzcDZlRzFpZW5CdloyOUJha0pNVTBac01HUmFWMGxaYkRKbGFsQldLMFJwTldaQ2JrdFFkVGh0ZVcxQ1VYUnZSUzlJTW1KRlV6QnhRWE00WWs1MVpWVXpRMEpxYW1neGJIZHVSSE5KUFNJc0lrMUpTVVJHYWtORFFYQjVaMEYzU1VKQlowbFZTWE5IYUZKM2NEQmpNbTUyVlRSWlUzbGpZV1pRVkdwNllrNWpkME5uV1VsTGIxcEplbW93UlVGM1RYZGFla1ZpVFVKclIwRXhWVVZCZDNkVFVWaENkMkpIVldkVmJUbDJaRU5DUkZGVFFYUkpSV042VFZOWmQwcEJXVVJXVVZGTVJFSXhRbU5JUW5OYVUwSkVXbGhLTUdGWFduQlpNa1l3WVZjNWRVbEZSakZrUjJoMlkyMXNNR1ZVUlZSTlFrVkhRVEZWUlVObmQwdFJXRUozWWtkVloxTlhOV3BNYWtWTVRVRnJSMEV4VlVWQ2FFMURWbFpOZDBob1kwNU5ha1YzVFhwRk0wMXFRWHBPZWtWM1YyaGpUazE2V1hkTmVrVTFUVVJCZDAxRVFYZFhha0l4VFZWUmQxRm5XVVJXVVZGRVJFUjBRbU5JUW5OYVUwSllZak5LYzFwSVpIQmFSMVZuVWtkV01scFhlSFpqUjFaNVNVWktiR0pIUmpCaFZ6bDFZM2xDUkZwWVNqQmhWMXB3V1RKR01HRlhPWFZKUlVZeFpFZG9kbU50YkRCbFZFVk1UVUZyUjBFeFZVVkRkM2REVW5wWmVFVjZRVkpDWjA1V1FrRnZUVU5yUm5kalIzaHNTVVZzZFZsNU5IaERla0ZLUW1kT1ZrSkJXVlJCYkZaVVRVaFpkMFZCV1VoTGIxcEplbW93UTBGUldVWkxORVZGUVVOSlJGbG5RVVZpYzFGTFF6azBVSEpzVjIxYVdHNVlaM1I0ZW1SV1NrdzRWREJUUjFsdVowUlNSM0J1WjI0elRqWlFWRGhLVFVWaU4wWkVhVFJpUW0xUWFFTnVXak12YzNFMlVFWXZZMGRqUzFoWGMwdzFkazkwWlZKb2VVbzBOWGd6UVZOUU4yTlBRaXRoWVc4NU1HWmpjSGhUZGk5RldrWmlibWxCWWs1bldrZG9TV2h3U1c4MFNEWk5TVWd6VFVKSlIwRXhWV1JGZDBWQ0wzZFJTVTFCV1VKQlpqaERRVkZCZDBoM1dVUldVakJxUWtKbmQwWnZRVlYxTjBSbGIxWm5lbWxLY1d0cGNHNWxkbkl6Y25JNWNreEtTM04zVW1kWlNVdDNXVUpDVVZWSVFWRkZSVTlxUVRSTlJGbEhRME56UjBGUlZVWkNla0ZDYUdsd2IyUklVbmRQYVRoMllqSk9lbU5ETldoalNFSnpXbE0xYW1JeU1IWmlNazU2WTBSQmVreFhSbmRqUjNoc1kyMDVkbVJIVG1oYWVrMTNUbmRaUkZaU01HWkNSRUYzVEdwQmMyOURjV2RMU1ZsdFlVaFNNR05FYjNaTU1rNTVZa00xYUdOSVFuTmFVelZxWWpJd2RsbFlRbmRpUjFaNVlqSTVNRmt5Um01TmVUVnFZMjEzZDBoUldVUldVakJQUWtKWlJVWkVPSFpzUTA1U01ERkVTbTFwWnprM1lrSTROV01yYkd0SFMxcE5RVFJIUVRGVlpFUjNSVUl2ZDFGRlFYZEpRa0pxUVZGQ1oyOXhhR3RwUnpreVRtdENaMGxDUWtGSlJrRkVRVXRDWjJkeGFHdHFUMUJSVVVSQmQwNXZRVVJDYkVGcVFrRllhRk54TlVsNVMyOW5UVU5RZEhjME9UQkNZVUkyTnpkRFlVVkhTbGgxWmxGQ0wwVnhXa2RrTmtOVGFtbERkRTl1ZFUxVVlsaFdXRzE0ZUdONFptdERUVkZFVkZOUWVHRnlXbGgyVG5KcmVGVXpWR3RWVFVrek0zbDZka1pXVmxKVU5IZDRWMHBET1RrMFQzTmtZMW8wSzFKSFRuTlpSSGxTTldkdFpISXdia1JIWnowaUxDSk5TVWxEVVhwRFEwRmpiV2RCZDBsQ1FXZEpTVXhqV0RocFRreEdVelZWZDBObldVbExiMXBKZW1vd1JVRjNUWGRhZWtWaVRVSnJSMEV4VlVWQmQzZFRVVmhDZDJKSFZXZFZiVGwyWkVOQ1JGRlRRWFJKUldONlRWTlpkMHBCV1VSV1VWRk1SRUl4UW1OSVFuTmFVMEpFV2xoS01HRlhXbkJaTWtZd1lWYzVkVWxGUmpGa1IyaDJZMjFzTUdWVVJWUk5Ra1ZIUVRGVlJVTm5kMHRSV0VKM1lrZFZaMU5YTldwTWFrVk1UVUZyUjBFeFZVVkNhRTFEVmxaTmQwaG9ZMDVOVkZGM1RrUk5kMDFVWjNoUFZFRXlWMmhqVGsxNmEzZE9SRTEzVFZSbmVFOVVRVEpYYWtKdVRWSnpkMGRSV1VSV1VWRkVSRUpLUW1OSVFuTmFVMEpUWWpJNU1FbEZUa0pKUXpCblVucE5lRXBxUVd0Q1owNVdRa0Z6VFVoVlJuZGpSM2hzU1VWT2JHTnVVbkJhYld4cVdWaFNjR0l5TkdkUldGWXdZVWM1ZVdGWVVqVk5VazEzUlZGWlJGWlJVVXRFUVhCQ1kwaENjMXBUUWtwaWJVMTFUVkZ6ZDBOUldVUldVVkZIUlhkS1ZsVjZRakpOUWtGSFFubHhSMU5OTkRsQlowVkhRbE4xUWtKQlFXbEJNa2xCUWtwcWNFeDZNVUZqY1ZSMGEzbEtlV2RTVFdNelVrTldPR05YYWxSdVNHTkdRbUphUkhWWGJVSlRjRE5hU0hSbVZHcHFWSFY0ZUVWMFdDOHhTRGRaZVZsc00wbzJXVkppVkhwQ1VFVldiMEV2Vm1oWlJFdFlNVVI1ZUU1Q01HTlVaR1J4V0d3MVpIWk5WbnAwU3pVeE4wbEVkbGwxVmxSYVdIQnRhMDlzUlV0TllVNURUVVZCZDBoUldVUldVakJQUWtKWlJVWk1kWGN6Y1VaWlRUUnBZWEJKY1ZvemNqWTVOall2WVhsNVUzSk5RVGhIUVRGVlpFVjNSVUl2ZDFGR1RVRk5Ra0ZtT0hkRVoxbEVWbEl3VUVGUlNDOUNRVkZFUVdkRlIwMUJiMGREUTNGSFUwMDBPVUpCVFVSQk1tZEJUVWRWUTAxUlEwUTJZMGhGUm13MFlWaFVVVmt5WlROMk9VZDNUMEZGV2t4MVRpdDVVbWhJUmtRdk0yMWxiM2xvY0cxMlQzZG5VRlZ1VUZkVWVHNVROR0YwSzNGSmVGVkRUVWN4Yldsb1JFc3hRVE5WVkRneVRsRjZOakJwYlU5c1RUSTNhbUprYjFoME1sRm1lVVpOYlN0WmFHbGtSR3RNUmpGMlRGVmhaMDAyUW1kRU5UWkxlVXRCUFQwaVhYMC5leUowY21GdWMyRmpkR2x2Ymtsa0lqb2lNekV3TURBeE5ETTFOamczTnpZeUlpd2liM0pwWjJsdVlXeFVjbUZ1YzJGamRHbHZia2xrSWpvaU16RXdNREF4TkRNMU5qZzNOell5SWl3aVluVnVaR3hsU1dRaU9pSmpiMjB1WjJGdFlXNXBZUzVqYUdsaWFXMWhjblZyYjJOb1pXVnlablZzYzNCcGNtbDBJaXdpY0hKdlpIVmpkRWxrSWpvaVkyOXRMbWRoYldGdWFXRXVZMmhwWW1sdFlYSjFhMjlqYUdWbGNtWjFiSE53YVhKcGRDNXdZV05yWVdkbFh6QTVJaXdpY0hWeVkyaGhjMlZFWVhSbElqb3hOamcwTlRneU9UUXpNREF3TENKdmNtbG5hVzVoYkZCMWNtTm9ZWE5sUkdGMFpTSTZNVFk0TkRVNE1qazBNekF3TUN3aWNYVmhiblJwZEhraU9qRXNJblI1Y0dVaU9pSkRiMjV6ZFcxaFlteGxJaXdpYVc1QmNIQlBkMjVsY25Ob2FYQlVlWEJsSWpvaVVGVlNRMGhCVTBWRUlpd2ljMmxuYm1Wa1JHRjBaU0k2TVRZNE5EYzNNamN6TVRrMk1Td2laVzUyYVhKdmJtMWxiblFpT2lKUWNtOWtkV04wYVc5dUluMC54V1RtWG9BMDItNXJSX0FmM3dKa2tJSjVFYTQ0OG1oTWxWWmtKcy13ci00ZS1sR2ltOVNueHY2V2J2OHFuNFM2S0tobHFUcDF2VWRPS1g3TlpOVHdlQSJ9LCJ2ZXJzaW9uIjoiMi4wIiwic2lnbmVkRGF0ZSI6MTY4NDc3MjczMTk1OH0.QCFtCwRUiEYRpxAc_vVLgH_eNajoA61f63zvYNc_MvZk35Y-Tb6rJVU3-77f7vhMQU8vmZzcVV6QqrQVLFoWYw\",\"apiName\":\"webapi\\/Refund\\/callback\\/904\",\"ipAddress\":\"10.100.27.92\"}\r\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Refund/callback/541",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Refund", "callback", "541"]
                }
            },
            "response": []
        },
        {
            "name": "Refund/callback/541__MOCK_CUSTOMER",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"notification_type\": \"REFUND\",\r\n    \"environment\": \"Sandbox\",\r\n    \"unified_receipt\": {\r\n        \"status\": 0,\r\n        \"environment\": \"Sandbox\",\r\n        \"latest_receipt_info\": [\r\n            {\r\n                \"quantity\": \"1\",\r\n                \"product_id\": \"com.gamania.galaxytest.t003\",\r\n                \"transaction_id\": \"1000000918634621\",\r\n                \"purchase_date\": \"2022-02-22 07:51:31 Etc\\/GMT\",\r\n                \"purchase_date_ms\": \"1645516291000\",\r\n                \"purchase_date_pst\": \"2022-02-21 23:51:31 America\\/Los_Angeles\",\r\n                \"original_purchase_date\": \"2022-02-22 07:51:31 Etc\\/GMT\",\r\n                \"original_purchase_date_ms\": \"1645516291000\",\r\n                \"original_purchase_date_pst\": \"2022-02-21 23:51:31 America\\/Los_Angeles\",\r\n                \"is_trial_period\": \"false\",\r\n                \"original_transaction_id\": \"1000000918634621\",\r\n                \"cancellation_date\": \"2022-02-22 09:37:33 Etc\\/GMT\",\r\n                \"cancellation_date_ms\": \"1645522653000\",\r\n                \"cancellation_date_pst\": \"2022-02-22 01:37:33 America\\/Los_Angeles\",\r\n                \"cancellation_reason\": \"0\",\r\n                \"in_app_ownership_type\": \"PURCHASED\"\r\n            }\r\n        ],\r\n        \"latest_receipt\": \"MIISagYJKoZIhvcNAQcCoIISWzCCElcCAQExCzAJBgUrDgMCGgUAMIICCwYJKoZIhvcNAQcBoIIB\\/ASCAfgxggH0MAoCAQgCAQEEAhYAMAoCARQCAQEEAgwAMAsCAQECAQEEAwIBADALAgELAgEBBAMCAQAwCwIBDwIBAQQDAgEAMAsCARACAQEEAwIBADALAgEZAgEBBAMCAQMwDAIBCgIBAQQEFgI0KzAMAgEOAgEBBAQCAgCiMA0CAQ0CAQEEBQIDAknwMA0CARMCAQEEBQwDMS4wMA4CAQMCAQEEBgwEbnVsbDAOAgEJAgEBBAYCBFAyNTYwGAIBBAIBAgQQ82D8ReUTzwfX7CdpTkDYDjAbAgEAAgEBBBMMEVByb2R1Y3Rpb25TYW5kYm94MBwCAQUCAQEEFCbqbNUGVby9n\\/523IQLh\\/jhbiaoMB4CAQwCAQEEFhYUMjAyMi0wMi0yMlQwOTo1MjozNFowHgIBEgIBAQQWFhQyMDEzLTA4LTAxVDA3OjAwOjAwWjAgAgECAgEBBBgMFmNvbS5nYW1hbmlhLmdhbGF4eXRlc3QwOwIBBwIBAQQzCfSNgt42f\\/J7jbFenIIpkZCRu21sSOn8GkkdtRMb2fAH+V+sNYpjMswHvw1Z1c4VOfrTMEsCAQYCAQEEQ0DIeJYu0q9WPLBClo\\/92DLVATd5pb3DQN32rIw9OiqY0V8q78fSfjgvpaZLhCyhR9GpSgqjtyFGEQHJFbsOpkWQMLOggg5lMIIFfDCCBGSgAwIBAgIIDutXh+eeCY0wDQYJKoZIhvcNAQEFBQAwgZYxCzAJBgNVBAYTAlVTMRMwEQYDVQQKDApBcHBsZSBJbmMuMSwwKgYDVQQLDCNBcHBsZSBXb3JsZHdpZGUgRGV2ZWxvcGVyIFJlbGF0aW9uczFEMEIGA1UEAww7QXBwbGUgV29ybGR3aWRlIERldmVsb3BlciBSZWxhdGlvbnMgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTUxMTEzMDIxNTA5WhcNMjMwMjA3MjE0ODQ3WjCBiTE3MDUGA1UEAwwuTWFjIEFwcCBTdG9yZSBhbmQgaVR1bmVzIFN0b3JlIFJlY2VpcHQgU2lnbmluZzEsMCoGA1UECwwjQXBwbGUgV29ybGR3aWRlIERldmVsb3BlciBSZWxhdGlvbnMxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApc+B\\/SWigVvWh+0j2jMcjuIjwKXEJss9xp\\/sSg1Vhv+kAteXyjlUbX1\\/slQYncQsUnGOZHuCzom6SdYI5bSIcc8\\/W0YuxsQduAOpWKIEPiF41du30I4SjYNMWypoN5PC8r0exNKhDEpYUqsS4+3dH5gVkDUtwswSyo1IgfdYeFRr6IwxNh9KBgxHVPM3kLiykol9X6SFSuHAnOC6pLuCl2P0K5PB\\/T5vysH1PKmPUhrAJQp2Dt7+mf7\\/wmv1W16sc1FJCFaJzEOQzI6BAtCgl7ZcsaFpaYeQEGgmJjm4HRBzsApdxXPQ33Y72C3ZiB7j7AfP4o7Q0\\/omVYHv4gNJIwIDAQABo4IB1zCCAdMwPwYIKwYBBQUHAQEEMzAxMC8GCCsGAQUFBzABhiNodHRwOi8vb2NzcC5hcHBsZS5jb20vb2NzcDAzLXd3ZHIwNDAdBgNVHQ4EFgQUkaSc\\/MR2t5+givRN9Y82Xe0rBIUwDAYDVR0TAQH\\/BAIwADAfBgNVHSMEGDAWgBSIJxcJqbYYYIvs67r2R1nFUlSjtzCCAR4GA1UdIASCARUwggERMIIBDQYKKoZIhvdjZAUGATCB\\/jCBwwYIKwYBBQUHAgIwgbYMgbNSZWxpYW5jZSBvbiB0aGlzIGNlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBhc3N1bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFyZCB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGNlcnRpZmljYXRlIHBvbGljeSBhbmQgY2VydGlmaWNhdGlvbiBwcmFjdGljZSBzdGF0ZW1lbnRzLjA2BggrBgEFBQcCARYqaHR0cDovL3d3dy5hcHBsZS5jb20vY2VydGlmaWNhdGVhdXRob3JpdHkvMA4GA1UdDwEB\\/wQEAwIHgDAQBgoqhkiG92NkBgsBBAIFADANBgkqhkiG9w0BAQUFAAOCAQEADaYb0y4941srB25ClmzT6IxDMIJf4FzRjb69D70a\\/CWS24yFw4BZ3+Pi1y4FFKwN27a4\\/vw1LnzLrRdrjn8f5He5sWeVtBNephmGdvhaIJXnY4wPc\\/zo7cYfrpn4ZUhcoOAoOsAQNy25oAQ5H3O5yAX98t5\\/GioqbisB\\/KAgXNnrfSemM\\/j1mOC+RNuxTGf8bgpPyeIGqNKX86eOa1GiWoR1ZdEWBGLjwV\\/1CKnPaNmSAMnBjLP4jQBkulhgwHyvj3XKablbKtYdaG6YQvVMpzcZm8w7HHoZQ\\/Ojbb9IYAYMNpIr7N4YtRHaLSPQjvygaZwXG56AezlHRTBhL8cTqDCCBCIwggMKoAMCAQICCAHevMQ5baAQMA0GCSqGSIb3DQEBBQUAMGIxCzAJBgNVBAYTAlVTMRMwEQYDVQQKEwpBcHBsZSBJbmMuMSYwJAYDVQQLEx1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEWMBQGA1UEAxMNQXBwbGUgUm9vdCBDQTAeFw0xMzAyMDcyMTQ4NDdaFw0yMzAyMDcyMTQ4NDdaMIGWMQswCQYDVQQGEwJVUzETMBEGA1UECgwKQXBwbGUgSW5jLjEsMCoGA1UECwwjQXBwbGUgV29ybGR3aWRlIERldmVsb3BlciBSZWxhdGlvbnMxRDBCBgNVBAMMO0FwcGxlIFdvcmxkd2lkZSBEZXZlbG9wZXIgUmVsYXRpb25zIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyjhUpstWqsgkOUjpjO7sX7h\\/JpG8NFN6znxjgGF3ZF6lByO2Of5QLRVWWHAtfsRuwUqFPi\\/w3oQaoVfJr3sY\\/2r6FRJJFQgZrKrbKjLtlmNoUhU9jIrsv2sYleADrAF9lwVnzg6FlTdq7Qm2rmfNUWSfxlzRvFduZzWAdjakh4FuOI\\/YKxVOeyXYWr9Og8GN0pPVGnG1YJydM05V+RJYDIa4Fg3B5XdFjVBIuist5JSF4ejEncZopbCj\\/Gd+cLoCWUt3QpE5ufXN4UzvwDtIjKblIV39amq7pxY1YNLmrfNGKcnow4vpecBqYWcVsvD95Wi8Yl9uz5nd7xtj\\/pJlqwIDAQABo4GmMIGjMB0GA1UdDgQWBBSIJxcJqbYYYIvs67r2R1nFUlSjtzAPBgNVHRMBAf8EBTADAQH\\/MB8GA1UdIwQYMBaAFCvQaUeUdgn+9GuNLkCm90dNfwheMC4GA1UdHwQnMCUwI6AhoB+GHWh0dHA6Ly9jcmwuYXBwbGUuY29tL3Jvb3QuY3JsMA4GA1UdDwEB\\/wQEAwIBhjAQBgoqhkiG92NkBgIBBAIFADANBgkqhkiG9w0BAQUFAAOCAQEAT8\\/vWb4s9bJsL4\\/uE4cy6AU1qG6LfclpDLnZF7x3LNRn4v2abTpZXN+DAb2yriphcrGvzcNFMI+jgw3OHUe08ZOKo3SbpMOYcoc7Pq9FC5JUuTK7kBhTawpOELbZHVBsIYAKiU5XjGtbPD2m\\/d73DSMdC0omhz+6kZJMpBkSGW1X9XpYh3toiuSGjErr4kkUqqXdVQCprrtLMK7hoLG8KYDmCXflvjSiAcp\\/3OIK5ju4u+y6YpXzBWNBgs0POx1MlaTbq\\/nJlelP5E3nJpmB6bz5tCnSAXpm4S6M9iGKxfh44YGuv9OQnamt86\\/9OBqWZzAcUaVc7HGKgrRsDwwVHzCCBLswggOjoAMCAQICAQIwDQYJKoZIhvcNAQEFBQAwYjELMAkGA1UEBhMCVVMxEzARBgNVBAoTCkFwcGxlIEluYy4xJjAkBgNVBAsTHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRYwFAYDVQQDEw1BcHBsZSBSb290IENBMB4XDTA2MDQyNTIxNDAzNloXDTM1MDIwOTIxNDAzNlowYjELMAkGA1UEBhMCVVMxEzARBgNVBAoTCkFwcGxlIEluYy4xJjAkBgNVBAsTHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRYwFAYDVQQDEw1BcHBsZSBSb290IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5JGpCR+R2x5HUOsF7V55hC3rNqJXTFXsixmJ3vlLbPUHqyIwAugYPvhQCdN\\/QaiY+dHKZpwkaxHQo7vkGyrDH5WeegykR4tb1BY3M8vED03OFGnRyRly9V0O1X9fm\\/IlA7pVj01dDfFkNSMVSxVZHbOU9\\/acns9QusFYUGePCLQg98usLCBvcLY\\/ATCMt0PPD5098ytJKBrI\\/s61uQ7ZXhzWyz21Oq30Dw4AkguxIRYudNU8DdtiFqujcZJHU1XBry9Bs\\/j743DN5qNMRX4fTGtQlkGJxHRiCxCDQYczioGxMFjsWgQyjGizjx3eZXP\\/Z15lvEnYdp8zFGWhd5TJLQIDAQABo4IBejCCAXYwDgYDVR0PAQH\\/BAQDAgEGMA8GA1UdEwEB\\/wQFMAMBAf8wHQYDVR0OBBYEFCvQaUeUdgn+9GuNLkCm90dNfwheMB8GA1UdIwQYMBaAFCvQaUeUdgn+9GuNLkCm90dNfwheMIIBEQYDVR0gBIIBCDCCAQQwggEABgkqhkiG92NkBQEwgfIwKgYIKwYBBQUHAgEWHmh0dHBzOi8vd3d3LmFwcGxlLmNvbS9hcHBsZWNhLzCBwwYIKwYBBQUHAgIwgbYagbNSZWxpYW5jZSBvbiB0aGlzIGNlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBhc3N1bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFyZCB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGNlcnRpZmljYXRlIHBvbGljeSBhbmQgY2VydGlmaWNhdGlvbiBwcmFjdGljZSBzdGF0ZW1lbnRzLjANBgkqhkiG9w0BAQUFAAOCAQEAXDaZTC14t+2Mm9zzd5vydtJ3ME\\/BH4WDhRuZPUc38qmbQI4s1LGQEti+9HOb7tJkD8t5TzTYoj75eP9ryAfsfTmDi1Mg0zjEsb+aTwpr\\/yv8WacFCXwXQFYRHnTTt4sjO0ej1W8k4uvRt3DfD0XhJ8rxbXjt57UXF6jcfiI1yiXV2Q\\/Wa9SiJCMR96Gsj3OBYMYbWwkvkrL4REjwYDieFfU9JmcgijNq9w2Cz97roy\\/5U2pbZMBjM3f3OgcsVuvaDyEO2rpzGU+12TZ\\/wYdV2aeZuTJC+9jVcZ5+oVK3G72TQiQSKscPHbZNnF5jyEuAF1CqitXa5PzQCQc3sHV1ITGCAcswggHHAgEBMIGjMIGWMQswCQYDVQQGEwJVUzETMBEGA1UECgwKQXBwbGUgSW5jLjEsMCoGA1UECwwjQXBwbGUgV29ybGR3aWRlIERldmVsb3BlciBSZWxhdGlvbnMxRDBCBgNVBAMMO0FwcGxlIFdvcmxkd2lkZSBEZXZlbG9wZXIgUmVsYXRpb25zIENlcnRpZmljYXRpb24gQXV0aG9yaXR5AggO61eH554JjTAJBgUrDgMCGgUAMA0GCSqGSIb3DQEBAQUABIIBAEIo6MQ8ypTHWYFLuCfNVA25H+\\/sCW7ZhcVju9PT0DVh\\/q3rNNUZ5sV0EUaIgNS6XbgR9dJcbxMWWdvi\\/XCGITxoJ9F+U+CUrHQ5GbKMSv+XhYnDxlqkAjF+OC\\/kRcdzb5FWiVmrRwABmQLM1wvBYTQ\\/5dhuqN4DzFKjP0Obut9nDtRaZ3bgENTI5cY18ReQieZZRms50sRDZI6W5fXNJs1EhRHTsyvMJmxSsF2YcbZkeD6XKApgCxawXcIhAaaY+6aWMNIXTjZRDdoqn3GTOW4h\\/cXCyHQToS1dTu\\/Lh6XANi0aDeExhZjHyuBAgHVfIzxSUC2AYMz+u8+KFZ2Db9s=\"\r\n    },\r\n    \"bid\": \"com.gamania.galaxytest\",\r\n    \"bvrs\": \"1\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://galaxy.beanfun.com/webapi-dev-haochiu/Refund/callback/541/MOCK_CUSTOMER",
                    "protocol": "https",
                    "host": ["galaxy", "beanfun", "com"],
                    "path": [
                        "webapi-dev-haochiu",
                        "Refund",
                        "callback",
                        "541",
                        "MOCK_CUSTOMER"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "Refund/Revert",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"UserObjectName\": 4440723357287424\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Refund/Revert",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Refund", "Revert"]
                }
            },
            "response": []
        },
        {
            "name": "Refund/Revert/Renew",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"UserObjectName\": 4440723357287424\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Refund/Revert/Renew",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Refund", "Revert", "Renew"]
                }
            },
            "response": []
        },
        {
            "name": "Refund/Order/Verify apple訂閱",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken =  requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                    },
                    {
                        "key": "DeviceType",
                        "value": "2",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"Country\": \"TW\",\r\n  \"Currency\": \"TWD\",\r\n  \"OrderID\": \"2000000371716595\",\r\n  \"OrgRefundOrderID\": \"20000003700078071\",\r\n  \"PaymentToken\": \"\",\r\n  \"PaymentType\": 1,\r\n  \"Price\": \"1050.00\",\r\n  \"ProductObjectID\": 171,\r\n  \"Quantity\": 1,\r\n  \"UserObjectID\": 101529\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Refund/Order/Verify",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Refund", "Order", "Verify"]
                }
            },
            "response": []
        },
        {
            "name": "Refund/Order/Verify google",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken =  requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                    },
                    {
                        "key": "DeviceType",
                        "value": "2",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"Country\": \"TW\",\r\n  \"Currency\": \"TWD\",\r\n  \"OrderID\": \"GPA.3394-5813-5791-36870\",\r\n  \"OrgRefundOrderID\": \"2000000370007807113\",\r\n  \"PaymentToken\": \"foeccjbbdiolomkmhkjedked.AO-J1Ow9CcZGvMLiNR2cP3aRdtQy8uoIsGdz0_navp14w1oyE_H1fqylZwPB_77ckdMzJC90JSBkE61TC3mbXztaS03YWQuULg\",\r\n  \"PaymentType\": 2,\r\n  \"Price\": \"123\",\r\n  \"ProductObjectID\": 147,\r\n  \"Quantity\": 1,\r\n  \"UserObjectID\": 101547\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Refund/Order/Verify",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Refund", "Order", "Verify"]
                }
            },
            "response": []
        },
        {
            "name": "Refund/Order/Verify google 有數量商品",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken =  requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                    },
                    {
                        "key": "DeviceType",
                        "value": "2",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"Country\": \"TW\",\r\n    \"Currency\": \"TWD\",\r\n    \"OrderID\": \"GPA.3356-4949-3539-66637\",\r\n    \"OrgRefundOrderID\": \"2000000370007807113\",\r\n    \"PaymentToken\": \"kocpelmpaofnifoneaocmjja.AO-J1OwwxwKoQDuKl64M-_OcURuaE29YwuTN1RixpwcBiYLtBtnX-SSVMHIt2AJsqnS8zyp-gSs3uSICIT8GQK3Lb08Z83o2yg\",\r\n    \"PaymentType\": 2,\r\n    \"Price\": \"$1050.00\",\r\n    \"ProductObjectID\": 147,\r\n    \"Quantity\": 6,\r\n    \"UserObjectID\": 101547\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Refund/Order/Verify",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Refund", "Order", "Verify"]
                }
            },
            "response": []
        },
        {
            "name": "Refund/Order/Verify google 訂閱",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken =  requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                    },
                    {
                        "key": "DeviceType",
                        "value": "2",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"Country\": \"TW\",\r\n  \"Currency\": \"TWD\",\r\n  \"OrderID\": \"GPA.3383-9367-6367-11814\",\r\n  \"OrgRefundOrderID\": \"20000003700078071\",\r\n  \"PaymentToken\": \"hhhabblfhakclkphbpondjal.AO-J1Ozp9PtUgBx_lGvCJjbJM0pJp3KB699ioKyXi29BA_iL4oW3dNq2WYSFhbNP5jTDzMXMfet13I01HxIldWBy3B8lHYdVFw\",\r\n  \"PaymentType\": 2,\r\n  \"Price\": \"1050.00\",\r\n  \"ProductObjectID\": 169,\r\n  \"Quantity\": 1,\r\n  \"UserObjectID\": 101529\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Refund/Order/Verify",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Refund", "Order", "Verify"]
                }
            },
            "response": []
        },
        {
            "name": "Refund/Revert - Way",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"UserObjectName\": \"5632559386017808\",\r\n    \"Way\": 2,\r\n    \"Country\": \"TW\",\r\n    \"Currency\": \"TWD\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Refund/Revert",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Refund", "Revert"]
                }
            },
            "response": []
        },
        {
            "name": "Refund/Revert - Way - Invoice",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"UserObjectName\": \"3929958045123584\",\r\n    \"Way\": 1,\r\n    \"InvoiceAddress\": \"\",\r\n    \"InvoiceCarrier\": \"\",\r\n    \"InvoiceEmail\": \"hao@gmai.ocm\",\r\n    \"InvoiceName\": \"\",\r\n    \"InvoicePhone\": \"\",\r\n    \"InvoiceType\": 2,\r\n    \"InvoiceUniform\": \"\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Refund/Revert",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Refund", "Revert"]
                }
            },
            "response": []
        },
        {
            "name": "Refund/Revert - Renew",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"UserObjectName\": 5440028881191936,\r\n    \"Renew\": 2\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Refund/Revert",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Refund", "Revert"]
                }
            },
            "response": []
        },
        {
            "name": "Sandbox/Test/Order/Verify - GooglePlay",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "\r",
                            "// console.log('requestDataJSON', requestDataJSON)\r",
                            "\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', requestDataBase64Encoded.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'));\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "var GameToken = requestSignatureBase64String.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"Country\": \"TW\",\r\n    \"Currency\": \"TWD\",\r\n    \"OrderID\": \"F54120220418173586\",\r\n    \"PaymentToken\": \"F54120220418173585\",\r\n    \"PaymentType\": 1,\r\n    \"Price\": \"99.00\",\r\n    \"ProductObjectID\": 0\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Sandbox/Test/Order/Verify",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Sandbox", "Test", "Order", "Verify"]
                }
            },
            "response": []
        },
        {
            "name": "User/Bind",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "value": "{{UserObjectID}}",
                        "type": "text"
                    },
                    {
                        "key": "UserSessionToken",
                        "value": "{{UserSessionToken}}",
                        "type": "text"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"AccessToken\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImJkYzRlMTA5ODE1ZjQ2OTQ2MGU2M2QzNGNkNjg0MjE1MTQ4ZDdiNTkiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJhenAiOiI2MTI0NjQzNjgxNjEtcGtjNzI5bDNtYXFlYWxpZHNibWJtb20zZGc1aDU2bmkuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiI2MTI0NjQzNjgxNjEtcGtjNzI5bDNtYXFlYWxpZHNibWJtb20zZGc1aDU2bmkuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMDgwNjE2NDE1Mjk4MjMyOTkxODAiLCJlbWFpbCI6InRva2lzYWtpNzc2MTg4QGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhdF9oYXNoIjoiRU1YcmhLbDAzMGlRYzRkaXZtOEY2USIsIm5hbWUiOiLmnpfls7vmr4UiLCJwaWN0dXJlIjoiaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGpqVjFnaE9yY09jdllBSjM0Q3pZTU8xX0ZVUjU4TEl1U1pfakJ5aWJmZkE9czk2LWMiLCJnaXZlbl9uYW1lIjoi5bO75q-FIiwiZmFtaWx5X25hbWUiOiLmnpciLCJsb2NhbGUiOiJ6aC1UVyIsImlhdCI6MTcwNzExMzY0NiwiZXhwIjoxNzA3MTE3MjQ2fQ.h9z904Y489AFLiJBRDAj3ye7Ujsma2dJQSTFHshAXZXXHbjxFz1erRgb9WzqiMHF7Xilh4aqwGBZZpp5ioK2ExdtLBc3x_EwFtXERVTlK8h4JUTw_7rVlzGuJE1WXMxQRlsKN6w917AcGUMxkXZ9NgjJ-vq4BwmBdmaanLRQPWVlkoVr2n1EnV0xemyqtPqh8zgbW5I_ZId7kshTkhbBJeuyhpQZwo8BZP1ByZMcCPk2xsZ_CMt5CIO4x-SiPkQk3t6GrhVSZa1RGJs0lRoND5KoEwZU9Dwf4g1yf0uyBbU9jTPj7ihLYOgzl33GY1uNDnF5Mf_OzZjNXX4hzu0V8w\",\r\n    \"PlatformType\": 4,\r\n    \"UserID\": \"108061641529823299180\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/Bind",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "Bind"]
                }
            },
            "response": []
        },
        {
            "name": "User/DeleteUser",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0-iOS"
                    },
                    {
                        "key": "GameLocale",
                        "value": "en-us",
                        "type": "text",
                        "disabled": true
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"UserObjectName\": 5658014377149440,\r\n    \"PINCode\": \"374086\",\r\n    \"DeleteAfterDays\": 4\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/DeleteUser",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "DeleteUser"]
                }
            },
            "response": []
        },
        {
            "name": "User/CancelDeleteUser",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0-iOS"
                    },
                    {
                        "key": "GameLocale",
                        "value": "en-us",
                        "type": "text",
                        "disabled": true
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"UserObjectName\": 5484058199655424\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/CancelDeleteUser",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "CancelDeleteUser"]
                }
            },
            "response": []
        },
        {
            "name": "User/DeleteUserFromTag",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"TagID\": 17,\r\n    \"UserObjectID\": [\r\n        103810\r\n    ]\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/DeleteUserFromTag",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "DeleteUserFromTag"]
                }
            },
            "response": []
        },
        {
            "name": "User/GetActionItem",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "DeviceType",
                        "value": "3",
                        "type": "default",
                        "disabled": true
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/GetActionItem",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "GetActionItem"]
                }
            },
            "response": []
        },
        {
            "name": "Get3rdOpenID",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"PlatformType\": 1\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/Get3rdOpenID",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "Get3rdOpenID"]
                }
            },
            "response": []
        },
        {
            "name": "User/GetBindItem",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/GetBindItem",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "GetBindItem"]
                }
            },
            "response": []
        },
        {
            "name": "User/GetDataByOpenID",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "/**\r",
                            " * Generate request `Hash`.\r",
                            " */\r",
                            "\r",
                            "let requestDataString = request.data;\r",
                            "let requestData = JSON.parse(requestDataString);\r",
                            "// console.log(JSON.stringify(requestData.Data));\r",
                            "\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = requestData.OpenID + JWTSignatureKey;\r",
                            "let requestSignatureString = CryptoJS.SHA256(signature).toString();\r",
                            "// console.log(requestData.OpenID, JWTSignatureKey, requestSignatureString);\r",
                            "postman.setEnvironmentVariable(\"Hash\", requestSignatureString);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"PlatformType\": 2,\r\n    \"GameID\": 541,\r\n    \"EnableSecondOpenID\": 0,\r\n    \"OpenID\": \"1000\",\r\n    \"Hash\": \"{{Hash}}\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/GetDataByOpenID",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "GetDataByOpenID"]
                }
            },
            "response": []
        },
        {
            "name": "User/GetFriendList",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0-Android"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/GetFriendList",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "GetFriendList"]
                }
            },
            "response": []
        },
        {
            "name": "User/GetFriendListForServer",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/GetFriendList/{{UserObjectID}}",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "GetFriendList", "{{UserObjectID}}"]
                }
            },
            "response": []
        },
        {
            "name": "User/GetProfile",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0-Android"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/GetProfile",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "GetProfile"]
                }
            },
            "response": []
        },
        {
            "name": "User/GetProfileForServer",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"VerifyToken\": true\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/GetProfile/{{UserObjectID}}",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "GetProfile", "{{UserObjectID}}"]
                }
            },
            "response": []
        },
        {
            "name": "User/GetTagDetail",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"TagID\": 9\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/GetTagDetail",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "GetTagDetail"]
                }
            },
            "response": []
        },
        {
            "name": "User/InsertUserIntoTag",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"TagID\": 17,\r\n    \"UserObjectID\": [\r\n        103810\r\n    ]\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/InsertUserIntoTag",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "InsertUserIntoTag"]
                }
            },
            "response": []
        },
        {
            "name": "User/Login - AppleID",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "let jsonData = JSON.parse(responseBody);\r",
                            "\r",
                            "let UserObjectID = jsonData.Results.UserObjectID;\r",
                            "if (typeof UserObjectID !== \"undefined\") {\r",
                            "    postman.setEnvironmentVariable('UserObjectID', UserObjectID);\r",
                            "}\r",
                            "\r",
                            "let UserSessionToken = jsonData.Results.UserSessionToken;\r",
                            "if (typeof UserSessionToken !== \"undefined\" && UserSessionToken.length > 0) {\r",
                            "    postman.setEnvironmentVariable('UserSessionToken', UserSessionToken);\r",
                            "}\r",
                            "\r",
                            "let UserObjectName = jsonData.Results.UserObjectName;\r",
                            "if (typeof UserObjectName !== \"undefined\") {\r",
                            "    postman.setEnvironmentVariable('UserObjectName', UserObjectName);\r",
                            "}"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "",
                        "value": "",
                        "type": "default",
                        "disabled": true
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"AccessToken\": \"eyJraWQiOiJsVkhkT3g4bHRSIiwiYWxnIjoiUlMyNTYifQ.eyJpc3MiOiJodHRwczovL2FwcGxlaWQuYXBwbGUuY29tIiwiYXVkIjoiY29tLmdhbWFuaWEuYXVyb3JhNy53ZWIiLCJleHAiOjE3MDgwNjc2MDIsImlhdCI6MTcwNzk4MTIwMiwic3ViIjoiMDAwMjA2LjI4ODc4MDUzZWQ0OTQ4YTdiMGYyNmMzODlmZGU3MDQwLjA3MzQiLCJub25jZSI6IjdiNTljNDliLTZiOTctNDRhZC05Y2VkLTEzMTlmY2M0ZGJhMi5pYk1Iblk1SjNXdmtmQjFuZ3NnQWd2WHl1cUdtcnpZTE51OVF3aW1mIiwiYXRfaGFzaCI6InBHRi0taEVHUkZhMFlETXBURzJhNGciLCJlbWFpbCI6IjhoZmc1NjU2YjZAcHJpdmF0ZXJlbGF5LmFwcGxlaWQuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlzX3ByaXZhdGVfZW1haWwiOnRydWUsImF1dGhfdGltZSI6MTcwNzk4MTIwMSwibm9uY2Vfc3VwcG9ydGVkIjp0cnVlfQ.BnexXrlL9n8j66vBFVbGO4joAe3wP-92HkA1sJzR9hBtmp7XFBK9r3xjLicIPVzQ7NtVlQ8CEZAzW94AKZ5mRnekmogiel5cIpe_liRYOYZ_In-p1UNXeAqdeOG5osSF_ANvGQxrtS0zcCqpG6TQ6kERvXFbwUoDjKolpnRLBKRDQsG1EX8qPWy8SMM2GrEu-Vi8hbmXA-9joti-bKB_yAZ-MzHaOah2FIvPrOiOH_N1ZxiEVgjn6I4JgoyN3oERHuSzpq5Ei31R8nCuK1k-UjAXVKRWQEhNGsKzhVJvaCyrhTyTt3tt9ElFRpB7cvGeewmerUkTl9YPqn1dbkcTKQ\",\r\n    \"PlatformType\": 3,\r\n    \"AuthSource\": \"web\",\r\n    \"UserID\": \"000206.28878053ed4948a7b0f26c389fde7040.0734\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/Login",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "Login"]
                }
            },
            "response": []
        },
        {
            "name": "User/Login - Beanfun",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "let jsonData = JSON.parse(responseBody);\r",
                            "\r",
                            "let UserObjectID = jsonData.Results.UserObjectID;\r",
                            "if (typeof UserObjectID !== \"undefined\") {\r",
                            "    postman.setEnvironmentVariable('UserObjectID', UserObjectID);\r",
                            "}\r",
                            "\r",
                            "let UserSessionToken = jsonData.Results.UserSessionToken;\r",
                            "if (typeof UserSessionToken !== \"undefined\" && UserSessionToken.length > 0) {\r",
                            "    postman.setEnvironmentVariable('UserSessionToken', UserSessionToken);\r",
                            "}\r",
                            "\r",
                            "let UserObjectName = jsonData.Results.UserObjectName;\r",
                            "if (typeof UserObjectName !== \"undefined\") {\r",
                            "    postman.setEnvironmentVariable('UserObjectName', UserObjectName);\r",
                            "}"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"AccessToken\": \"435DCC72DDE1404F92F6ED102BEA1E97EBA212C9417882D2110C61AB636B75588036C0F0628920D30AACBA2BE9A93840373C0B66675FD3DC1C52A1753E72EFAE\",\r\n    \"PlatformType\": 1,\r\n    \"UserID\": \"\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/Login",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "Login"]
                }
            },
            "response": []
        },
        {
            "name": "User/Login - Facebook",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "let jsonData = JSON.parse(responseBody);\r",
                            "\r",
                            "let UserObjectID = jsonData.Results.UserObjectID;\r",
                            "if (typeof UserObjectID !== \"undefined\") {\r",
                            "    postman.setEnvironmentVariable('UserObjectID', UserObjectID);\r",
                            "}\r",
                            "\r",
                            "let UserSessionToken = jsonData.Results.UserSessionToken;\r",
                            "if (typeof UserSessionToken !== \"undefined\" && UserSessionToken.length > 0) {\r",
                            "    postman.setEnvironmentVariable('UserSessionToken', UserSessionToken);\r",
                            "}\r",
                            "\r",
                            "let UserObjectName = jsonData.Results.UserObjectName;\r",
                            "if (typeof UserObjectName !== \"undefined\") {\r",
                            "    postman.setEnvironmentVariable('UserObjectName', UserObjectName);\r",
                            "}"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "value": "{{GameID}}",
                        "type": "text"
                    },
                    {
                        "key": "GameToken",
                        "value": "{{GameToken}}",
                        "type": "text"
                    },
                    {
                        "key": "GameClientVersion",
                        "value": "1.1.0",
                        "type": "text"
                    },
                    {
                        "key": "SDKClientVersion",
                        "value": "1.1.0",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"AccessToken\": \"EAAD87VPKvHEBO4V1J1DPsEvSDa9rw1U8gFLUr0kFmTBtsefF1uGKHRy7d2u8j3Uu4zsXhCV4PrhgXBq5c9ouC3AYOZCERwD796WOt4colqB1fXvFIOkXZBPcIw4O2uan5CoaofaWmR8e4Ik8Hc6whCakWHM5ZCmEvFVZAwTOlZClEgR1PWtLgZAW3RswK41ml4ss3AIpZA7GtnFb1LhYxUn7dWXTAEPhd4r0Sad2VZBjASVtlcVZAnvZB84bMcmpx4NDHOqgZDZD\",\r\n    \"PlatformType\": 2,\r\n    \"UserID\": \"23902332812687281\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/Login",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "Login"]
                }
            },
            "response": []
        },
        {
            "name": "User/Login - Google",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "let jsonData = JSON.parse(responseBody);\r",
                            "\r",
                            "let UserObjectID = jsonData.Results.UserObjectID;\r",
                            "if (typeof UserObjectID !== \"undefined\") {\r",
                            "    postman.setEnvironmentVariable('UserObjectID', UserObjectID);\r",
                            "}\r",
                            "\r",
                            "let UserSessionToken = jsonData.Results.UserSessionToken;\r",
                            "if (typeof UserSessionToken !== \"undefined\" && UserSessionToken.length > 0) {\r",
                            "    postman.setEnvironmentVariable('UserSessionToken', UserSessionToken);\r",
                            "}\r",
                            "\r",
                            "let UserObjectName = jsonData.Results.UserObjectName;\r",
                            "if (typeof UserObjectName !== \"undefined\") {\r",
                            "    postman.setEnvironmentVariable('UserObjectName', UserObjectName);\r",
                            "}"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "value": "{{GameID}}",
                        "type": "text"
                    },
                    {
                        "key": "GameToken",
                        "value": "{{GameToken}}",
                        "type": "text"
                    },
                    {
                        "key": "GameClientVersion",
                        "value": "1.1.0",
                        "type": "text"
                    },
                    {
                        "key": "SDKClientVersion",
                        "value": "1.1.0",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"AccessToken\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImVkODA2ZjE4NDJiNTg4MDU0YjE4YjY2OWRkMWEwOWE0ZjM2N2FmYzQiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJhenAiOiI2MTI0NjQzNjgxNjEtcGtjNzI5bDNtYXFlYWxpZHNibWJtb20zZGc1aDU2bmkuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiI2MTI0NjQzNjgxNjEtcGtjNzI5bDNtYXFlYWxpZHNibWJtb20zZGc1aDU2bmkuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMDY5NTgxOTU0MTI2NjkzMDk3MTUiLCJoZCI6ImdhbWFuaWEuY29tIiwiZW1haWwiOiJ0aW5vbGluQGdhbWFuaWEuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImF0X2hhc2giOiJEcmxVd3ZZa1NaaUhoUUx0SjFSTkpRIiwibmFtZSI6InRpbm8gTElOKOael-Wzu-avhSkiLCJwaWN0dXJlIjoiaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXdSUjJnMmpzNGpvaDZIMzNmdDQ3ak91SVNfUHBIcHBDYUtIZTgyWTlMPXM5Ni1jIiwiZ2l2ZW5fbmFtZSI6Iijmnpfls7vmr4UpIiwiZmFtaWx5X25hbWUiOiJ0aW5vIExJTiIsImxvY2FsZSI6InpoLVRXIiwiaWF0IjoxNzA3OTY5MjgwLCJleHAiOjE3MDc5NzI4ODB9.GYBPHrjuzxNArxhb9UjKnSG-mFvDu-On_qjBxBc8tuW54oxuQyNk7ou-kr56REGore4pwFDC00Y_erUWsW8NJuixAFnFTZ7S-kkP5f_smCsDezU5s1geQ_ywKXVhF7gogbG6nZUEhleo-DvDK5EFhGMYCFUs-T56cNV3EeKGFIL8XDyQCpKLP72Ar5Mwb-wTQ_mbqRClEaeFeaeEv161ZzWkrHKbTiQ9kFLveObS0LabYzfEv5Ua8mISc6AvfIpvKyr4KyGUXX2D1ym2LtpONie1DhOSZPIhr6dHdH1abnZt3MjghB7gy57JZOAVpMEhUBFV0jV53TtOF1D_BxJmhQ\",\r\n    \"PlatformType\": 4,\r\n    \"UserID\": \"106958195412669309715\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/Login",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "Login"]
                }
            },
            "response": []
        },
        {
            "name": "User/Login - Guest",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "let jsonData = JSON.parse(responseBody);\r",
                            "\r",
                            "let UserObjectID = jsonData.Results.UserObjectID;\r",
                            "if (typeof UserObjectID !== \"undefined\") {\r",
                            "    postman.setEnvironmentVariable('UserObjectID', UserObjectID);\r",
                            "}\r",
                            "\r",
                            "let UserSessionToken = jsonData.Results.UserSessionToken;\r",
                            "if (typeof UserSessionToken !== \"undefined\" && UserSessionToken.length > 0) {\r",
                            "    postman.setEnvironmentVariable('UserSessionToken', UserSessionToken);\r",
                            "}\r",
                            "\r",
                            "let UserObjectName = jsonData.Results.UserObjectName;\r",
                            "if (typeof UserObjectName !== \"undefined\") {\r",
                            "    postman.setEnvironmentVariable('UserObjectName', UserObjectName);\r",
                            "}"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "value": "{{GameID}}",
                        "type": "text"
                    },
                    {
                        "key": "GameToken",
                        "value": "{{GameToken}}",
                        "type": "text"
                    },
                    {
                        "key": "GameClientVersion",
                        "value": "1.1.0",
                        "type": "text"
                    },
                    {
                        "key": "SDKClientVersion",
                        "value": "1.1.0",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"PlatformType\": 0,\r\n    \"UserID\": \"23902332812687281673611234555\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/Login",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "Login"]
                }
            },
            "response": []
        },
        {
            "name": "User/RenewSessionToken",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "console.log(GameToken)\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "let jsonData = JSON.parse(responseBody);\r",
                            "\r",
                            "let UserObjectID = jsonData.Results.UserObjectID;\r",
                            "if (typeof UserObjectID !== \"undefined\") {\r",
                            "    postman.setEnvironmentVariable('UserObjectID', UserObjectID);\r",
                            "}\r",
                            "\r",
                            "let UserSessionToken = jsonData.Results.UserSessionToken;\r",
                            "if (typeof UserSessionToken !== \"undefined\" && UserSessionToken.length > 0) {\r",
                            "    postman.setEnvironmentVariable('UserSessionToken', UserSessionToken);\r",
                            "}\r",
                            "\r",
                            "let UserObjectName = jsonData.Results.UserObjectName;\r",
                            "if (typeof UserObjectName !== \"undefined\") {\r",
                            "    postman.setEnvironmentVariable('UserObjectName', UserObjectName);\r",
                            "}"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "oauth2",
                    "oauth2": [
                        {
                            "key": "addTokenTo",
                            "value": "header",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "value": "1.1.0",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/RenewSessionToken",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "RenewSessionToken"]
                }
            },
            "response": []
        },
        {
            "name": "User/VerifyToken",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"IsShowThirdPartyBinds\": 1,\r\n    \"UserObjectID\": 101611,\r\n    \"UserSessionToken\": \"sess95523f8268e89803973112a946f873ba\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/VerifyToken",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "VerifyToken"]
                }
            },
            "response": []
        },
        {
            "name": "User/Unlink/{GameID}/{PlatformType}",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "// let requestDataString = request.data;\r",
                            "// let tmp_requestData = JSON.parse(requestDataString);\r",
                            "// let requestData = {};\r",
                            "// Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "//   requestData[key] = tmp_requestData[key];\r",
                            "// });\r",
                            "// let requestDataJSON = JSON.stringify(requestData);\r",
                            "// let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "// let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "// const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "// const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "// let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// // console.log('signature', signature);\r",
                            "// let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "// let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "// var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "// GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// // console.log('GameToken', GameToken);\r",
                            "\r",
                            "// postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "// let jsonData = JSON.parse(responseBody);\r",
                            "\r",
                            "// let UserObjectID = jsonData.Results.UserObjectID;\r",
                            "// if (typeof UserObjectID !== \"undefined\") {\r",
                            "//     postman.setEnvironmentVariable('UserObjectID', UserObjectID);\r",
                            "// }\r",
                            "\r",
                            "// let UserSessionToken = jsonData.Results.UserSessionToken;\r",
                            "// if (typeof UserSessionToken !== \"undefined\" && UserSessionToken.length > 0) {\r",
                            "//     postman.setEnvironmentVariable('UserSessionToken', UserSessionToken);\r",
                            "// }\r",
                            "\r",
                            "// let UserObjectName = jsonData.Results.UserObjectName;\r",
                            "// if (typeof UserObjectName !== \"undefined\") {\r",
                            "//     postman.setEnvironmentVariable('UserObjectName', UserObjectName);\r",
                            "// }"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "value": "{{GameID}}",
                        "type": "text"
                    },
                    {
                        "key": "GameToken",
                        "value": "{{GameToken}}",
                        "type": "text"
                    },
                    {
                        "key": "GameClientVersion",
                        "value": "1.1.0",
                        "type": "text"
                    },
                    {
                        "key": "SDKClientVersion",
                        "value": "1.1.0",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "urlencoded",
                    "urlencoded": [
                        {
                            "key": "signed_request",
                            "value": "R30WpJmtQmDoDhYX7CYTmei6zV3abvrSCucSznTX4cY.eyJ1c2VyX2lkIjoiMTAwMjYxNjg5MzAyOTEyIiwiYWxnb3JpdGhtIjoiSE1BQy1TSEEyNTYiLCJpc3N1ZWRfYXQiOjE2NDc4NTI3Nzd9",
                            "type": "text"
                        }
                    ]
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/Unlink/541/2",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "Unlink", "541", "2"]
                }
            },
            "response": []
        },
        {
            "name": "Verify/CheckMobileBinding",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Verify/CheckMobileBinding",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Verify", "CheckMobileBinding"]
                }
            },
            "response": []
        },
        {
            "name": "User/Bind/GetOneTimeWebLink",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "value": "{{UserObjectID}}",
                        "type": "text"
                    },
                    {
                        "key": "UserSessionToken",
                        "value": "{{UserSessionToken}}",
                        "type": "text"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"PlatformType\": 0,\r\n    \"Locale\": \"zh-tw\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/Bind/GetOneTimeWebLink",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "Bind", "GetOneTimeWebLink"]
                }
            },
            "response": []
        },
        {
            "name": "User/Bind/GetOneTimeWebInfo",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "value": "{{UserObjectID}}",
                        "type": "text"
                    },
                    {
                        "key": "UserSessionToken",
                        "value": "{{UserSessionToken}}",
                        "type": "text"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"OTT\": \"OTT:541:Bind:7a5fed61d5b20c54814649e114f9329aa036535862f3aab93117997f325cc6b3ead83a4318283d421ec1492309c3c60ba7c60ec617597fab3b9bd32ce79e7ee5d79d7c76616880a6ebc88f444ac1d0224b63f5dd0024e6a9f2655245f647df500885209f96550618a782e777dab2f6624f4dd81812bc428dad41706f3f7cbff7b188e4bfa58c8dd0c2f9ef647268bce83d2962e7aac926629d6e4c4fafb5f139c26117903b4aa899df5eb1964882f876f82d111c1d196b93638a2b848ada25e4c94bb6a1edd706b2c3e156183239146ad7da83afa59f4069bdb0ca87214eadcb6f8606282897ab335067132a79279c2331d84a71d4d9894293cdb67f1944bca4374b150f63f427edde8ce8e04d9477c51fbe467bb91d2bb0a7ddae353b264ffb31e99deaa2ceeb1d87f1e3acbe0698c688b675b5cbf24c684ebcad96115111dba0e412bc5e1ad60d63d1439cd817135c84736b16b953c0813bd4ea02c9586de526e614fa69fbcb56e23cb3ba35774bebe929f2cc2f31d451f58a1e09c348e686\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/Bind/GetOneTimeWebInfo",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "Bind", "GetOneTimeWebInfo"]
                }
            },
            "response": []
        },
        {
            "name": "Order/Verify - AppStore訂閱",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "\r",
                            "// console.log('requestDataJSON', requestDataJSON)\r",
                            "\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', requestDataBase64Encoded.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'));\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = requestSignatureBase64String.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "2.0.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"Country\": \"TW\",\r\n    \"Currency\": \"TWD\",\r\n    \"OrderID\": \"2000000371716595\",\r\n    \"PaymentToken\": \"\",\r\n    \"PaymentType\": 1,\r\n    \"Price\": \"199\",\r\n    \"ProductObjectID\": 171\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Order/Verify",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Order", "Verify"]
                }
            },
            "response": []
        },
        {
            "name": "Order/Verify - GooglePlay訂閱",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "\r",
                            "// console.log('requestDataJSON', requestDataJSON)\r",
                            "\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', requestDataBase64Encoded.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'));\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = requestSignatureBase64String.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"Country\": \"TW\",\r\n    \"Currency\": \"KRW\",\r\n    \"OrderID\": \"GPA.3340-7044-1557-85364\",\r\n    \"PaymentToken\": \"jdoeikaoicaccifnokiebdfp.AO-J1OzJ73WnBcDnV12xQi6qhz4MuLb4lxtKrJcn3SdgbjnW8nTqm7suAeL8iT4AIczPajMjpp__IryDsMizDnvmEst-SvaeCg\",\r\n    \"PaymentType\": 2,\r\n    \"Price\": \"1500\",\r\n    \"ProductObjectID\": 169,\r\n    \"Quantity\": 1\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Order/Verify",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Order", "Verify"]
                }
            },
            "response": []
        },
        {
            "name": "Subscription/GetList",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "5.0.2"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "5.0.2-Android"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"IsShowAll\": false\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Subscription/GetList",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Subscription", "GetList"]
                }
            },
            "response": []
        },
        {
            "name": "Refund/callback/541 apple續約",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"notification_type\": \"DID_RENEW\",\r\n  \"password\": \"c255cbbb3f9f49cf8d6220d270ea5128\",\r\n  \"environment\": \"Sandbox\",\r\n  \"auto_renew_product_id\": \"com.gamania.galaxyautosubtest.t005\",\r\n  \"auto_renew_status\": \"true\",\r\n  \"unified_receipt\": {\r\n    \"status\": 0,\r\n    \"environment\": \"Sandbox\",\r\n    \"latest_receipt_info\": [\r\n      {\r\n        \"quantity\": \"1\",\r\n        \"product_id\": \"com.gamania.galaxyautosubtest.t005\",\r\n        \"transaction_id\": \"2000000371718595\",\r\n        \"purchase_date\": \"2023-07-19 09:52:21 Etc/GMT\",\r\n        \"purchase_date_ms\": \"1689760341000\",\r\n        \"purchase_date_pst\": \"2023-07-19 02:52:21 America/Los_Angeles\",\r\n        \"original_purchase_date\": \"2023-07-19 09:49:31 Etc/GMT\",\r\n        \"original_purchase_date_ms\": \"1689760171000\",\r\n        \"original_purchase_date_pst\": \"2023-07-19 02:49:31 America/Los_Angeles\",\r\n        \"expires_date\": \"2023-07-19 09:55:21 Etc/GMT\",\r\n        \"expires_date_ms\": \"1689760521000\",\r\n        \"expires_date_pst\": \"2023-07-19 02:55:21 America/Los_Angeles\",\r\n        \"web_order_line_item_id\": \"2000000032188880\",\r\n        \"is_trial_period\": \"false\",\r\n        \"is_in_intro_offer_period\": \"false\",\r\n        \"original_transaction_id\": \"2000000371716595\",\r\n        \"in_app_ownership_type\": \"PURCHASED\",\r\n        \"subscription_group_identifier\": \"20928145\"\r\n      },\r\n      {\r\n        \"quantity\": \"1\",\r\n        \"product_id\": \"com.gamania.galaxyautosubtest.t005\",\r\n        \"transaction_id\": \"2000000371716595\",\r\n        \"purchase_date\": \"2023-07-19 09:49:21 Etc/GMT\",\r\n        \"purchase_date_ms\": \"1689760161000\",\r\n        \"purchase_date_pst\": \"2023-07-19 02:49:21 America/Los_Angeles\",\r\n        \"original_purchase_date\": \"2023-07-19 09:49:31 Etc/GMT\",\r\n        \"original_purchase_date_ms\": \"1689760171000\",\r\n        \"original_purchase_date_pst\": \"2023-07-19 02:49:31 America/Los_Angeles\",\r\n        \"expires_date\": \"2023-07-19 09:52:21 Etc/GMT\",\r\n        \"expires_date_ms\": \"1689760341000\",\r\n        \"expires_date_pst\": \"2023-07-19 02:52:21 America/Los_Angeles\",\r\n        \"web_order_line_item_id\": \"2000000032188878\",\r\n        \"is_trial_period\": \"false\",\r\n        \"is_in_intro_offer_period\": \"false\",\r\n        \"original_transaction_id\": \"2000000371716595\",\r\n        \"in_app_ownership_type\": \"PURCHASED\",\r\n        \"subscription_group_identifier\": \"20928145\"\r\n      },\r\n      {\r\n        \"quantity\": \"1\",\r\n        \"product_id\": \"com.gamania.galaxytest.t002\",\r\n        \"transaction_id\": \"2000000344016973\",\r\n        \"purchase_date\": \"2023-06-05 08:32:57 Etc/GMT\",\r\n        \"purchase_date_ms\": \"1685953977000\",\r\n        \"purchase_date_pst\": \"2023-06-05 01:32:57 America/Los_Angeles\",\r\n        \"original_purchase_date\": \"2023-06-05 08:32:57 Etc/GMT\",\r\n        \"original_purchase_date_ms\": \"1685953977000\",\r\n        \"original_purchase_date_pst\": \"2023-06-05 01:32:57 America/Los_Angeles\",\r\n        \"is_trial_period\": \"false\",\r\n        \"original_transaction_id\": \"2000000344016973\",\r\n        \"cancellation_date\": \"2023-06-05 09:35:51 Etc/GMT\",\r\n        \"cancellation_date_ms\": \"1685957751000\",\r\n        \"cancellation_date_pst\": \"2023-06-05 02:35:51 America/Los_Angeles\",\r\n        \"cancellation_reason\": \"1\",\r\n        \"in_app_ownership_type\": \"PURCHASED\"\r\n      },\r\n      {\r\n        \"quantity\": \"1\",\r\n        \"product_id\": \"com.gamania.galaxytest.t002\",\r\n        \"transaction_id\": \"2000000342705570\",\r\n        \"purchase_date\": \"2023-06-02 03:05:57 Etc/GMT\",\r\n        \"purchase_date_ms\": \"1685675157000\",\r\n        \"purchase_date_pst\": \"2023-06-01 20:05:57 America/Los_Angeles\",\r\n        \"original_purchase_date\": \"2023-06-02 03:05:57 Etc/GMT\",\r\n        \"original_purchase_date_ms\": \"1685675157000\",\r\n        \"original_purchase_date_pst\": \"2023-06-01 20:05:57 America/Los_Angeles\",\r\n        \"is_trial_period\": \"false\",\r\n        \"original_transaction_id\": \"2000000342705570\",\r\n        \"cancellation_date\": \"2023-06-02 04:08:13 Etc/GMT\",\r\n        \"cancellation_date_ms\": \"1685678893000\",\r\n        \"cancellation_date_pst\": \"2023-06-01 21:08:13 America/Los_Angeles\",\r\n        \"cancellation_reason\": \"0\",\r\n        \"in_app_ownership_type\": \"PURCHASED\"\r\n      },\r\n      {\r\n        \"quantity\": \"1\",\r\n        \"product_id\": \"com.gamania.galaxytest.t003\",\r\n        \"transaction_id\": \"2000000341003759\",\r\n        \"purchase_date\": \"2023-05-31 02:40:44 Etc/GMT\",\r\n        \"purchase_date_ms\": \"1685500844000\",\r\n        \"purchase_date_pst\": \"2023-05-30 19:40:44 America/Los_Angeles\",\r\n        \"original_purchase_date\": \"2023-05-31 02:40:44 Etc/GMT\",\r\n        \"original_purchase_date_ms\": \"1685500844000\",\r\n        \"original_purchase_date_pst\": \"2023-05-30 19:40:44 America/Los_Angeles\",\r\n        \"is_trial_period\": \"false\",\r\n        \"original_transaction_id\": \"2000000341003759\",\r\n        \"cancellation_date\": \"2023-05-31 10:16:40 Etc/GMT\",\r\n        \"cancellation_date_ms\": \"1685528200000\",\r\n        \"cancellation_date_pst\": \"2023-05-31 03:16:40 America/Los_Angeles\",\r\n        \"cancellation_reason\": \"0\",\r\n        \"in_app_ownership_type\": \"PURCHASED\"\r\n      },\r\n      {\r\n        \"quantity\": \"1\",\r\n        \"product_id\": \"com.gamania.galaxyNonRenewabletest.t001\",\r\n        \"transaction_id\": \"2000000337857799\",\r\n        \"purchase_date\": \"2023-05-25 09:31:18 Etc/GMT\",\r\n        \"purchase_date_ms\": \"1685007078000\",\r\n        \"purchase_date_pst\": \"2023-05-25 02:31:18 America/Los_Angeles\",\r\n        \"original_purchase_date\": \"2023-05-25 09:31:18 Etc/GMT\",\r\n        \"original_purchase_date_ms\": \"1685007078000\",\r\n        \"original_purchase_date_pst\": \"2023-05-25 02:31:18 America/Los_Angeles\",\r\n        \"is_trial_period\": \"false\",\r\n        \"original_transaction_id\": \"2000000337857799\",\r\n        \"in_app_ownership_type\": \"PURCHASED\"\r\n      },\r\n      {\r\n        \"quantity\": \"1\",\r\n        \"product_id\": \"com.gamania.galaxytest.t003\",\r\n        \"transaction_id\": \"2000000319541054\",\r\n        \"purchase_date\": \"2023-04-25 10:08:22 Etc/GMT\",\r\n        \"purchase_date_ms\": \"1682417302000\",\r\n        \"purchase_date_pst\": \"2023-04-25 03:08:22 America/Los_Angeles\",\r\n        \"original_purchase_date\": \"2023-04-25 10:08:22 Etc/GMT\",\r\n        \"original_purchase_date_ms\": \"1682417302000\",\r\n        \"original_purchase_date_pst\": \"2023-04-25 03:08:22 America/Los_Angeles\",\r\n        \"is_trial_period\": \"false\",\r\n        \"original_transaction_id\": \"2000000319541054\",\r\n        \"cancellation_date\": \"2023-05-31 03:44:15 Etc/GMT\",\r\n        \"cancellation_date_ms\": \"1685504655000\",\r\n        \"cancellation_date_pst\": \"2023-05-30 20:44:15 America/Los_Angeles\",\r\n        \"cancellation_reason\": \"0\",\r\n        \"in_app_ownership_type\": \"PURCHASED\"\r\n      }\r\n    ],\r\n    \"latest_receipt\": \"\",\r\n    \"pending_renewal_info\": [\r\n      {\r\n        \"auto_renew_status\": \"1\",\r\n        \"auto_renew_product_id\": \"com.gamania.galaxyautosubtest.t005\",\r\n        \"product_id\": \"com.gamania.galaxyautosubtest.t005\",\r\n        \"original_transaction_id\": \"2000000371716595\"\r\n      }\r\n    ]\r\n  },\r\n  \"bid\": \"com.gamania.galaxytest\",\r\n  \"bvrs\": \"1\",\r\n  \"original_transaction_id\": 2000000371716595,\r\n  \"deprecation\": \"Mon, 5 Jun 2023 23:59:59 GMT\",\r\n  \"apiName\": \"webapirc/AppStore/callback/541\",\r\n  \"ipAddress\": \"192.168.76.127\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/AppStore/callback/541",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["AppStore", "callback", "541"]
                }
            },
            "response": []
        },
        {
            "name": "Device/IPIfo",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"MobileID\": \"\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Device/IPInfo",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Device", "IPInfo"]
                }
            },
            "response": []
        },
        {
            "name": "apple server",
            "request": {
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"receipt-data\":\"\",\n    \"password\": \"c255cbbb3f9f49cf8d6220d270ea5128\"\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://sandbox.itunes.apple.com/verifyReceipt",
                    "protocol": "https",
                    "host": ["sandbox", "itunes", "apple", "com"],
                    "path": ["verifyReceipt"]
                }
            },
            "response": []
        },
        {
            "name": "Subscription/GetList",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "\r",
                            "// console.log('requestDataJSON', requestDataJSON)\r",
                            "\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', requestDataBase64Encoded.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'));\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = requestSignatureBase64String.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "UserObjectID",
                        "type": "text",
                        "value": "{{UserObjectID}}"
                    },
                    {
                        "key": "UserSessionToken",
                        "type": "text",
                        "value": "{{UserSessionToken}}"
                    },
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"IsShowAll\": false\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Subscription/GetList",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Subscription", "GetList"]
                }
            },
            "response": []
        },
        {
            "name": "TWP 通知刪除api",
            "request": {
                "method": "DELETE",
                "header": [
                    {
                        "key": "x-inface-api-key",
                        "value": "1fa894ea-e694-5211-8d47-b852ad58c06f",
                        "type": "default"
                    },
                    {
                        "key": "gameID",
                        "value": "912",
                        "type": "default"
                    },
                    {
                        "key": "token",
                        "value": "451f5c51bb6141622476ad4fec1199249d9a40dd1ca481edabaccdfd17c0e150",
                        "type": "default"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": ""
                },
                "url": {
                    "raw": "https://private.api.nexon.com/ims/v1/member/GAMANIA/{{UserObjectID}}/guid",
                    "protocol": "https",
                    "host": ["private", "api", "nexon", "com"],
                    "path": [
                        "ims",
                        "v1",
                        "member",
                        "GAMANIA",
                        "{{UserObjectID}}",
                        "guid"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "appstore test",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6IjVITVRMTEFGWjIifQ.eyJpc3MiOiI2OWE2ZGU4Ny01NWJmLTQ3ZTMtZTA1My01YjhjN2MxMWE0ZDEiLCJpYXQiOjE3MDg0MjMzNTUsImV4cCI6MTcwODQyNDU1NSwiYXVkIjoiYXBwc3RvcmVjb25uZWN0LXYxIiwiYmlkIjoiY29tLmdhbWFuaWEuZ2FsYXh5dGVzdCJ9.gYoJMw7DFjuc9t9_wjTI4DBbj6ZcS9H_ftx7Nzc0q_Zdnn4wLd2auRT_hYruBSi8aJdMOY8qYtopVFzVXusy8g",
                            "type": "string"
                        }
                    ]
                },
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "https://api.storekit-sandbox.itunes.apple.com/inApps/v1/transactions/2000000525346210",
                    "protocol": "https",
                    "host": [
                        "api",
                        "storekit-sandbox",
                        "itunes",
                        "apple",
                        "com"
                    ],
                    "path": ["inApps", "v1", "transactions", "2000000525346210"]
                }
            },
            "response": []
        },
        {
            "name": "User/Login/GetOneTimeWebLink",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.0.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "DeviceType",
                        "value": "3",
                        "type": "default",
                        "disabled": true
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"PlatformType\": 0,\r\n    \"Locale\" : \"en-us\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/Login/GetOneTimeWebLink",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "Login", "GetOneTimeWebLink"]
                }
            },
            "response": []
        },
        {
            "name": "User/Login/GetOneTimeWebInfo",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken = signature + '.' + requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "let jsonData = JSON.parse(responseBody);",
                            "",
                            "let UserObjectID = jsonData.Results.UserObjectID;",
                            "if (typeof UserObjectID !== \"undefined\") {",
                            "    postman.setEnvironmentVariable('UserObjectID', UserObjectID);",
                            "}",
                            "",
                            "let UserSessionToken = jsonData.Results.UserSessionToken;",
                            "if (typeof UserSessionToken !== \"undefined\" && UserSessionToken.length > 0) {",
                            "    postman.setEnvironmentVariable('UserSessionToken', UserSessionToken);",
                            "}",
                            "",
                            "let UserObjectName = jsonData.Results.UserObjectName;",
                            "if (typeof UserObjectName !== \"undefined\") {",
                            "    postman.setEnvironmentVariable('UserObjectName', UserObjectName);",
                            "}"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"OTT\": \"OTT:541:Login:d3922ccf80951c7c7fe047b55337d1059516a6aa3e49bd394f8863ff1ded099e940e5e57f26771ada9f56517c6d645f4d602849e46e68ed4dc40c561a2260ab88dd8be4ef11358375f314d77b7d31cf5c4040e89bfa611e50484f14e8220a05485901584f9ebf9130cf59843e91f45481c74c409cecab16e871f1a52534c934701b817abb981a13219d2a6e001c7cfa98860e5e066d3962a3a4be8410d22d206fac9a4714d3eda5396ca330919ec9ccd4ec8e3b39f4a4c6ec324e64fc5fd3b60395e79f03a00da0857d403f3b3eeb69bfc1ac2fc9f3745f36bdd6fe6aa86c9e764cc028a66c66df63eaddccf848b396c7e6ee19bcc9481eab7a190cc889e48c31ae17002b93dafe38635f577205949e6e33240f68ef14839af47525739beafa7d07766cab52a69fcc30c5395feb8461a81dac58c616497c3b16d4a135e36cd7fc5915e29305e20157bed5168b8f79d82c0ac616c93bb4d5c54cc49db763691e4e3c9f8218dfbfaf1e4c11ae394b2764bb19bcc1873ec17b43d7c4afef22ebef5\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/User/Login/GetOneTimeWebInfo",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["User", "Login", "GetOneTimeWebInfo"]
                }
            },
            "response": []
        },
        {
            "name": "Refund/Transaction/Verify apple storekit2",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "let requestDataString = request.data;\r",
                            "let tmp_requestData = JSON.parse(requestDataString);\r",
                            "let requestData = {};\r",
                            "Object.keys(tmp_requestData).sort().forEach(function(key) {\r",
                            "  requestData[key] = tmp_requestData[key];\r",
                            "});\r",
                            "let requestDataJSON = JSON.stringify(requestData);\r",
                            "let requestDataBase64EncodedWord = CryptoJS.enc.Utf8.parse(requestDataJSON);\r",
                            "let requestDataBase64Encoded = CryptoJS.enc.Base64.stringify(requestDataBase64EncodedWord);\r",
                            "\r",
                            "const JWTHeaderJSON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';\r",
                            "const JWTSignatureKey = pm.environment.get('GameToken--Key');\r",
                            "let signature = JWTHeaderJSON + '.' + requestDataBase64Encoded;\r",
                            "// console.log('signature', signature);\r",
                            "let signatureBytes = CryptoJS.HmacSHA256(signature.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-'), JWTSignatureKey);\r",
                            "let requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);\r",
                            "\r",
                            "var GameToken =  requestSignatureBase64String;\r",
                            "GameToken = GameToken.replace(/=/gi, '').replace(/\\//gi, '_').replace(/\\+/gi, '-');\r",
                            "\r",
                            "// console.log('GameToken', GameToken);\r",
                            "\r",
                            "postman.setEnvironmentVariable(\"GameToken\", GameToken);"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [""],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "GameID",
                        "type": "text",
                        "value": "{{GameID}}"
                    },
                    {
                        "key": "GameToken",
                        "type": "text",
                        "value": "{{GameToken}}"
                    },
                    {
                        "key": "GameClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "SDKClientVersion",
                        "type": "text",
                        "value": "1.1.0"
                    },
                    {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                    },
                    {
                        "key": "DeviceType",
                        "value": "2",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"OrderID\": \"2000000506915422\",\r\n  \"OrgRefundOrderID\": \"2000000510997219\",\r\n  \"UserObjectID\": 101562\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{API-Protocol}}://{{API-Hostname}}/Refund/Transaction/Verify",
                    "protocol": "{{API-Protocol}}",
                    "host": ["{{API-Hostname}}"],
                    "path": ["Refund", "Transaction", "Verify"]
                }
            },
            "response": []
        },
        {
            "name": "https://api.storekit-sandbox.itunes.apple.com/inApps/v1/transactions/2000000525346210",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6IkZaNE5LNFIzRFcifQ.eyJpc3MiOiI2OWE2ZGU4Ny01NWJmLTQ3ZTMtZTA1My01YjhjN2MxMWE0ZDEiLCJpYXQiOjE3MDgzMDg4OTgsImV4cCI6MTcwODMxMDA5OCwiYXVkIjoiYXBwc3RvcmVjb25uZWN0LXYxIiwiYmlkIjoiY29tLmdhbWFuaWEudHdwIn0.fQTY4_rVGok6ufc7mnebgc146XXSPanPWPiNmXf1V6ZaZ9x8JJ9MORvT51qoKBvMusZ91Nx2KO6U9ZkEL-_cFQ",
                            "type": "string"
                        }
                    ]
                },
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "https://api.storekit-sandbox.itunes.apple.com/inApps/v1/transactions/2000000525346210",
                    "protocol": "https",
                    "host": [
                        "api",
                        "storekit-sandbox",
                        "itunes",
                        "apple",
                        "com"
                    ],
                    "path": ["inApps", "v1", "transactions", "2000000525346210"]
                }
            },
            "response": []
        }
    ]
}
